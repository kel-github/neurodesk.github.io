[{"body":"The goal of neurodesk is to provide users with a large choice of tools to use in their pipelines. Use the guide below to add a tool to neurodesktop or neurocontainers.\nGuiding principles To decide if a tool should be packaged in a singularity container in neurocontainers or be installed in the neurodesktop container we are currently following these guiding principles:\n neurodesk is not a package manager. This means we are not distributing tools in containers that can easily be installed via a standard package manager neurodesk allows users to have multiple versions of tools in parallel via lmod, this means that if different versions of a tool can’t be installed in parallel we package the tool inside a container. neurodesk aims to provide tooling to link tools from different containers (such as workflow managers like nipype or nextflow). This means that if a tool is required to coordinate various container-tools, it should be in the neurodesktop container.  Examples:\n    easy install coordinates containers small in size latest version is ok useful to most users Conclusion     git yes yes yes yes yes neurodesktop   lmod no yes yes yes yes neurodesktop   nipype yes yes yes yes yes neurodesktop   vscode yes yes yes yes yes neurodesktop   itksnap yes no yes yes yes container?   convert3D yes no yes no no container   fsl no no no no no container   mrtrix no no no no no container   freesurfer no no no no no container    Adding new recipes Refer to neurodocker for more information on neurodocker recipes\nBuild container To build a container, set up environment with:\n Docker, the version in our CI environment Python, the version in our CI environment  And then follow these steps:\n Sync/modify Neurodocker, the dependency we are using to build containers:  Press “Fetch upstream” in https://github.com/NeuroDesk/neurodocker to check if our fork of Neurodocker is already up-to-date If there are upstream commits that are not synced yet, open an issue in https://github.com/NeuroDesk/neurocontainers/issues, requesting one of Neurodesk admins to pull-in latest changes from Neurodocker upstream into our fork of Neurodocker If relevant to your project, add recipe to neurodocker (https://github.com/NeuroDesk/neurodocker) and create a pull request to neurodocker (add new tool in a branch!)   Clone the neurocontainers repository: Optional: Fork neurocontainers and setup github actions\n Fork https://github.com/NeuroDesk/neurocontainers into your account. Go to your neurocontainers fork. If Actions tab is missing, go to Settings \u003e Actions. Select Allow all actions. Then Save. In the actions tab, select “I understand my workflows, go ahead and enable them”  Pushes to the recipes in your fork will now trigger actions to build the respective docker container, and push them to your Github Packages.\n   https://github.com/NeuroDesk/neurocontainers\ngit clone https://github.com/NeuroDesk/neurocontainers/ Copy the directory template and rename to newapp in neurocontainers/recipes  cd neurocontainers/recipes cp -R template newapp Modify build.sh in neurocontainers/recipes/newapp to build your application and update README.md (make sure the version is correct in the README!)  cd newapp (edit build.sh as required) (edit README.md as required) Upload your application to object storage first if needed, so you can then download it in build.sh (ask for instructions about this if you don’t know the key, and never share it anywhere public!)\nRun update-builders.sh - This will auto-create the CI workflow for the application (or manually duplicate the template file and rename all occurances of template to newapp)  cd ../.. sh update-builders.sh  if the CI build runs out of space, add the application to the following txt to add additional space. https://github.com/NeuroDesk/neurocontainers/blob/master/.github/workflows/free-up-space-list.txt. Note this, significantly increases CI run time, only use in cases of space errors.\n  Build and test the container locally\n clone our fork of Neurodocker: git clone https://github.com/NeuroDesk/neurodocker/ install neurodocker: cd neurodocker; python -m pip install . run the build script with the –debug flag: https://github.com/NeuroDesk/neurocontainers/blob/master/recipes/lcmodel/build.sh  chmod +x build.sh ./build.sh -debug test running some commands within the container that should be available in your local docker container repository if your application requires a Matlab Runtime and you get an error about shared library “libmwlaunchermain.so” not found, check which version of the runtime was installed by the build script    Update changes in local git repository\n  git add recipes/newapp/build.sh recipes/newapp/README.md .github/workflows/newapp.yml git config user.email \"the email that you use for github\" git config user.name \"your name\" git commit Generate git personal access token (if you don’t have one already)  Browse to https://github.com/NeuroDesk/neurocontainers/ Press on your picture in upper right corner --\u003e Setting --\u003e Developer Settings --\u003e Personal Access Token Press on “generate personal access token” Write something in “Notes” (doesn’t matter what, it’s for your own use) Check “repo” Check “Workflow” Press “Generate Token” at the bottom Copy the token displayed on the screen into a file, so you’ll have it later Test the container locally, and if successful push repo to trigger the automatic build on GitHub  git pull git push  Go to neurocontainers/actions. Check that the most recent workflow run in the list terminated successfully (green). Otherwise, click on it, click on “build docker”, and the line that caused the error will be highlighted\n  Find your new package under https://github.com/orgs/NeuroDesk/packages?repo_name=neurocontainers\nEnter the name of the package in the search box, and verify that the full package name shows up in the format toolName_toolVersion\n  Obtain buildDate by clicking on the full package name that came up in the search. The build date will be the newest date shown under Recent tagged image versions\n  Use toolName, toolVersion and buildDate from the previous two steps to manually download the package by typing the following in a terminal open in Neurodesktop\n  bash /neurocommand/local/fetch_and_run.sh toolName toolVersion buildDate ml toolName/toolVersion For example: If the full package name that comes up in the step 11 is itksnap_3.8.0, and the newest date under Recent tagged image versions is 20210322\nThe command to use in a terminal open in Neurodesktop is:\nbash /neurocommand/local/fetch_and_run.sh itksnap 3.8.0 20210322 ml toolName/toolVersion Depreciation notice For VNM users use:\nbash /neurodesk/local/fetch_and_run.sh toolName toolVersion buildDate ml toolName/toolVersion  Test the new container. Run some commands, to see all is good  If the container doesn’t work yet, it’s sometimes useful to try and troubleshoot it and install missing libraries. This can be achieved by running it in a writable mode with fakeroot enabled:\nSINGULARITY_BINDPATH=''; singularity shell --writable --fakeroot /neurodesktop-storage/containers/toolName_toolVersion_buildDate/toolName_toolVersion_buildDate.simg Fork https://github.com/NeuroDesk/neurocommand/ to your Github account Edit an entry for your package in your fork of neurocommand/blob/main/neurodesk/apps.json based on one of the other entries (generating one menu item for opening a terminal inside the containers, and one menu item for the GUI, if relevant). Notice that in the json file, the version field should contain the buildDate Include an icon file in your fork of neurocommand/tree/main/neurodesk/icons Send a pull request from your fork of neurocommand to https://github.com/NeuroDesk/neurocommand/ When the pull request is merged by Neurodesk admins, it will trigger an action to build the singularity container, distribute it in all object storage locations and on CVMFS, and it will update the menus in the desktop image on the next daily build Check in the dev build if everything is ok before releasing a new version of Neurodesktop:  sudo docker pull vnmd/neurodesktop-dev:latest \u0026\u0026 sudo docker run --shm-size=1gb -it --privileged --name neurodesktop -v ~/neurodesktop-storage:/neurodesktop-storage -e HOST_UID=\"$(id -u)\" -e HOST_GID=\"$(id -g)\" -p 8080:8080 -h neurodesktop-dev vnmd/neurodesktop-dev:latest Consider contributing a tutorial about the new tool: https://github.com/NeuroDesk/neurodesk.github.io/tree/hugo-docsy/content/en/tutorials  ","categories":"","description":"Add a tool to neurodesktop\n","excerpt":"Add a tool to neurodesktop\n","ref":"/neurodesk.github.io/developers/new_tools/add_tool/","tags":"","title":"Add tools"},{"body":"","categories":"","description":"The architecture of the Neurodesk ecosystem\n","excerpt":"The architecture of the Neurodesk ecosystem\n","ref":"/neurodesk.github.io/developers/architecture/","tags":"","title":"Architecture"},{"body":" This tutorial was created by Sin Kim.\nGithub: @AKSoo\nTwitter: @SinKim98\n In addition to being a convenient method of sharing data, DataLad can also help you create reproducible analyses by recording how certain result files were produced (i.e. provenance). This helps others (and you!) easily keep track of analyses and rerun them.\nThis tutorial will assume you know the basics of navigating the terminal. If you are not familiar with the terminal at all, check the DataLad Handbook’s brief guide.\nCreate a DataLad project A DataLad dataset can be any collection of files in folders, so it could be many things including an analysis project. Let’s go to the Neurodesktop storage and create a dataset for some project. Open a terminal and enter these commands:\n$ cd /neurodesktop-storage $ datalad create -c yoda SomeProject [INFO ] Creating a new annex repo at /home/user/Desktop/neurodesktop-storage/SomeProject [INFO ] Running procedure cfg_yoda [INFO ] == Command start (output follows) ===== [INFO ] == Command exit (modification check follows) ===== create(ok): /home/user/Desktop/neurodesktop-storage/SomeProject (dataset)  yoda? -c yoda option configures the dataset according to the YODA, a set of intuitive organizational principles for data analyses that works especially well with version control.  Go in the dataset and check its contents.\n$ cd SomeProject $ ls CHANGELOG.md README.md code Create a script One of DataLad’s strengths is that it assumes very little about your datasets. Thus, it can work with any other software on the terminal: Python, R, MATLAB, AFNI, FSL, FreeSurfer, etc. For this tutorial, we will run the simplest Julia script.\n$ ml julia $ cat \u003e code/hello.jl \u003c\u003c EOF println(\"hello neurodesktop\") EOF  EOF? For sake of demonstration, we create the script using built-in Bash terminal commands only (here document that starts after \u003c\u003c EOF and ends when you enter EOF), but you may use whatever text editor you are most comfortable with to create the code/hello.jl file.  You may want to test (parts of) your script.\n$ julia code/hello.jl \u003e hello.txt $ cat hello.txt hello neurodesktop Run and record Before you run your analyses, you should check the dataset for changes and save or clean them.\n$ datalad status untracked: /home/user/Desktop/neurodesktop-storage/SomeProject/code/hello.jl (file) untracked: /home/user/Desktop/neurodesktop-storage/SomeProject/hello.txt (file) $ datalad save -m 'hello script' code/ add(ok): code/hello.jl (file) save(ok): . (dataset) action summary: add (ok: 1) save (ok: 1) $ git clean -i Would remove the following item: hello.txt *** Commands *** 1: clean 2: filter by pattern 3: select by numbers 4: ask each 5: quit 6: help What now\u003e 1 Removing hello.txt  git git clean is for removing new, untracked files. For resetting existing, modified files to the last saved version, you would need git reset --hard.  When the dataset is clean, we are ready to datalad run!\n$ mkdir outputs $ datalad run -m 'run hello' -o 'outputs/hello.txt' 'julia code/hello.jl \u003e outputs/hello.txt' [INFO ] == Command start (output follows) ===== [INFO ] == Command exit (modification check follows) ===== add(ok): outputs/hello.txt (file) save(ok): . (dataset) Let’s go over each of the arguments:\n -m 'run hello': Human-readable message to record in the dataset log. -o 'outputs/hello.txt': Expected output of the script. You can specify multiple -o arguments and/or use wildcards like 'outputs/*'. This script has no inputs, but you can similarly specify inputs with -i. 'julia ... ': The final argument is the command that DataLad will run.  Before getting to the exciting part, let’s do a quick sanity check.\n$ cat outputs/hello.txt hello neurodesktop View history and rerun So what’s so good about the extra hassle of running scripts with datalad run? To see that, you will need to pretend you are someone else (or you of future!) and install the dataset somewhere else. Note that -s argument is probably a URL if you were really someone else.\n$ cd ~ $ datalad install -s /neurodesktop-storage/SomeProject install(ok): /home/user/SomeProject (dataset) $ cd SomeProject Because a DataLad dataset is a Git repository, people who download your dataset can see exactly how outputs/hello.txt was created using Git’s logs.\n$ git log outputs/hello.txt commit 52cff839596ff6e33aadf925d15ab26a607317de (HEAD -\u003e master, origin/master, origin/HEAD) Author: Neurodesk User \u003cuser@neurodesk.github.io\u003e Date: Thu Dec 9 08:31:15 2021 +0000 [DATALAD RUNCMD] run hello === Do not change lines below === { \"chain\": [], \"cmd\": \"julia code/hello.jl \u003e outputs/hello.txt\", \"dsid\": \"1e82813d-856f-4118-b54d-c3823e025709\", \"exit\": 0, \"extra_inputs\": [], \"inputs\": [], \"outputs\": [ \"outputs/hello.txt\" ], \"pwd\": \".\" } ^^^ Do not change lines above ^^^ Then, using that information, they can re-run the command that created the file using datalad rerun!\n$ datalad rerun 52cf [INFO ] run commit 52cff83; (run hello) run.remove(ok): outputs/hello.txt (file) [Removed file] [INFO ] == Command start (output follows) ===== [INFO ] == Command exit (modification check follows) ===== add(ok): outputs/hello.txt (file) action summary: add (ok: 1) run.remove (ok: 1) save (notneeded: 1)  git In Git, each commit (save state) is assigned a long, unique machine-generated ID. 52cf refers to the commit with ID that starts with those characters. Usually 4 is the minimum needed to uniquely identify a commit. Of course, this ID is probably different for you, so change this argument to match your commit.  See Also  To learn more basics and advanced applications of DataLad, check out the DataLad Handbook. DataLad is built on top of the popular version control tool Git. There are many great resources on Git online, like this free book. DataLad is only available on the terminal. For a detailed introduction on the Bash terminal, check the BashGuide. For even more reproducibility, you can include containers with your dataset to run analyses in. DataLad has an extension to support script execution in containers. See here.  ","categories":"","description":"Using datalad run, you can precisely record results of your analysis scripts.\n","excerpt":"Using datalad run, you can precisely record results of your analysis …","ref":"/neurodesk.github.io/tutorials/reproducibility/datalad-run/","tags":["datalad"],"title":"Reproducible script execution with DataLad"},{"body":"Overview For an overview of the Neurodesk platform, go to: Overview\nQuick Start To install the Neurodesktop container, go to: Getting Started\nFeedback \u0026 Inquiries To ask questions or suggest new features, join the discussion on github. For issues with the Neurodesk platform, please open a new issue.\nAcknowledgments -- Funding Thank you to Oracle for Research for providing Oracle Cloud credits and related resources to support this project.\nThis project is supported by an Australian Research Data Commons (ARDC) Platform project “Australian Electrophysiology Data Analytics PlaTform (AEDAPT)”.\nLicense MIT License\nCopyright (c) 2021 NeuroDesk\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","categories":"","description":"A flexible, scalable and easy to use data analysis environment for reproducible neuroimaging.\n","excerpt":"A flexible, scalable and easy to use data analysis environment for …","ref":"/neurodesk.github.io/docs/","tags":"","title":"Documentation"},{"body":" This tutorial was created by Kelly G. Garner.\nEmail: getkellygarner@gmail.com\nGithub: @kel_github\nTwitter: @garnertheory\n  This workflow documents how to use fmriprep with neurodesk and provides some details that may help you troubleshoot some common problems I found along the way.\n  Assumptions  Your data is already in BIDS format You plan to run fmriprep using Neurodesk You have a local copy of the freesurfer license file (freesurfer.txt)   Steps Open fmriprep From the applications go Neurodesk -\u003e Functional Imaging -\u003e fmriprep and select the latest version of fmriprep. This should take you to a terminal window with fmriprep loaded.\nSetting up fmriprep command If you like, you can enter the following fmriprep command straight into the command line in the newly opened terminal. However, as with increasing options and preferences the command can get rather verbose, I instead opted to create an executable bash script that I can run straight from the command line, with minimal editing inbetween runs. If you’re not interested in this option you can skip straight to copying/adjusting the code from fmriprep to -v below.\n open a new file in your editor of choice but really you know it should be Visual Studio Code save that file with your chosen name without an extension, e.g. run_fmriprep paste in the following and update with your details  #!/bin/bash # # written by A. Name - the purpose of this code is to run fmriprep with neurodesk export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=6 # specify the number of threads you want to use fmriprep /path/to/your/data \\ # this is the top level of your data folder /path/to/your/data/derivatives \\ # where you want fmriprep output to be saved participant \\ # this tells fmriprep to analyse at the participant level --fs-license-file /path/to/your/freesurfer.txt \\ # where the freesurfer license file is --output-spaces T1w MNI152NLin2009cAsym fsaverage fsnative \\  --participant-label 01 \\ # put what ever participant labels you want to analyse --nprocs 6 --mem 10000 \\ # fmriprep can be greedy on the hpc, make sure it is not --skip_bids_validation \\ # its normally fine to skip this but do make sure your data are BIDS enough -v # be verbal fmriprep, tell me what you are doing To make the file executable, navigate to this file via the command line in terminal and type\nchmod u+x run_fmriprep # this tells the system to make your new file executable Then to run your new executable, return to your terminal window for fmriprep (that opened when you navigated to fmriprep) and type:\n./run_fmriprep fmriprep should now be merrily working away on your data :)\n Some common pitfalls I have learned from my mistakes (and sometimes from others)   If fmriprep hangs it could well be that you are out of disk space. Sometimes this is because fmriprep created a work directory in your home folder which is often limited on the HPC. Make sure fmriprep knows to use a work drectory in your scratch. you can specify this in the fmriprep command by using -w /path/to/the/work/directory/you/made\n  I learned this from TomCat (@thomshaw92) - fmriprep can get confused between subjects when run in parallel. Parallelise with caution.\n  If running on a HPC, make sure to set the processor and memory limits, if not your job will get killed because it hogs all the resources.\n  ","categories":"","description":"A brief guide to using fmriprep with neurodesk, using data from the STRIAVISE project.\n","excerpt":"A brief guide to using fmriprep with neurodesk, using data from the …","ref":"/neurodesk.github.io/tutorials/functional_imaging/fmriprep_cvl/","tags":["fmriprep","documentation","preprocessing"],"title":"Using fmriprep with neurodesk on an HPC"},{"body":"Download demo data Open a terminal and run:\npip install osfclient osf -p bt4ez fetch TOMCAT_DIB/sub-01/ses-01_7T/anat/sub-01_ses-01_7T_T1w_defaced.nii.gz /neurodesktop-storage/sub-01_ses-01_7T_T1w_defaced.nii.gz FreeSurfer License file: Before using Freesurfer you need to request a license here (https://surfer.nmr.mgh.harvard.edu/registration.html) and store it in your homedirectory as ~/.license\nFreeSurfer Example Open FreeSurfer (Neurodesk -\u003e Image Segmentation -\u003e Freesurfer -\u003e Freesurfer 7.1.1)\nSetup FreeSurfer license (for example - replace with your license):\necho \"Steffen.Bollmann@cai.uq.edu.au \u003e 21029 \u003e *Cqyn12sqTCxo \u003e FSxgcvGkNR59Y\" \u003e\u003e ~/.license export FS_LICENSE=~/.license Setup FreeSurfer:\nmkdir /neurodesktop-storage/freesurfer-output source /opt/freesurfer-7.1.1/SetUpFreeSurfer.sh export SUBJECTS_DIR=/neurodesktop-storage/freesurfer-output Run Recon all pipeline:\nrecon-all -subject test-subject -i /neurodesktop-storage/sub-01_ses-01_7T_T1w_defaced.nii.gz -all ","categories":"","description":"Example workflow for FreeSurfer\n","excerpt":"Example workflow for FreeSurfer\n","ref":"/neurodesk.github.io/tutorials/structural_imaging/freesurfer/","tags":"","title":"FreeSurfer"},{"body":"","categories":"","description":"Select your operating system to get started with neurocommand.\n","excerpt":"Select your operating system to get started with neurocommand.\n","ref":"/neurodesk.github.io/docs/neurocommand/getting-started/","tags":"","title":"Getting Started"},{"body":"","categories":"","description":"Select your operating system to get started with neurodesktop.\n","excerpt":"Select your operating system to get started with neurodesktop.\n","ref":"/neurodesk.github.io/docs/neurodesktop/getting-started/","tags":"","title":"Getting Started"},{"body":"Requirements: Required  python 3.6+ https://docs.conda.io/en/latest/miniconda.html#linux-installers singularity https://sylabs.io/guides/3.5/user-guide/quick_start.html git  Optional  lmod https://lmod.readthedocs.io/en/latest/  command line mode (e.g. running on an HPC or CVL)  Load singularity and for best performance it should be 3.x e.g. module load singularity/3.5.0 Load or install aria2 to optimize the download performance of our containers e.g. module load aria2c Run git clone https://github.com/NeuroDesk/neurocommand.git to clone the repository - make sure to clone this to a directory with enough storage, write permissions and NOT a symbolic link (to be sure run cd `pwd -P`)! Run cd neurocommand to change into the directory Run pip3 install -r neurodesk/requirements.txt --user to install pre-requisite python packages Run bash build.sh --cli to install in cli mode Run bash containers.sh for installing indiviual containers or bash containers.sh --all for installing all containers Run module use $PWD/local/containers/modules/ to add the containers to your module search path. Add this to your .bashrc if working. Run ml avail to see the installed containers at the top of the list (neurodesk containers will take preference over system modules with the same name). - If a container is not yet there run ml --ignore_cache avail  For Lxde desktops If running on an lxde desktop… Run bash build.sh --lxde --edit\nFor Mate desktops Run bash build.sh --init (or bash build.sh --lxde --edit)\nlxde/mate: Mate\ninstalldir: Where all the neurocommand files will be stored (Default: ./local)\nappmenu: The linux menu xml file. (Usually /etc/xdg/menus/****-applications.menu)\nappdir: Location for the .desktop files for this linux desktop (Usually /usr/share/applications)\ndeskdir: Location for the .directory files for this linux desktop (Typically /usr/share/desktop-directories)\nFor desktop menus: sudo bash install.sh to install\nCreates symlinks to menu files in installation dir\nsudo bash uninstall.sh to uninstall\nRemoves symlinks\nTo update Run git pull\nRun bash build.sh\ninstall.sh does not need to be run again\nTo download all containers Run bash containers.sh --all\n","categories":"","description":"Install neurocommand on Linux\n","excerpt":"Install neurocommand on Linux\n","ref":"/neurodesk.github.io/docs/neurocommand/getting-started/linux/","tags":"","title":"Linux"},{"body":"Minimum System Requirements  At least 3GB free space for neurodesktop base image Docker requirements. Details found under https://docs.docker.com/get-docker/  Quickstart 1. Install Docker Install Docker from here: https://docs.docker.com/get-docker/. Additional information available below\n2. Run Neurodesktop Before the first run, create a local folder where the downloaded applications will be stored, e.g. ~/neurodesktop-storage\nThen use one of the following options to run Neurodesktop:\nOption 1: NeuroDesktop.run Download and run the following executable https://github.com/NeuroDesk/neurodesktop/raw/main/Linux_run_Neurodesk/NeuroDesktop.run\nOption 2: Using Terminal  Open a terminal, and type the folowing command to automatically download the neurodesktop container and run it (Mac, Windows, Linux commands listed below)  sudo docker run \\ --shm-size=1gb -it --privileged --name neurodesktop \\ -v ~/neurodesktop-storage:/neurodesktop-storage \\ -e HOST_UID=\"$(id -u)\" -e HOST_GID=\"$(id -g)\" \\ -p 8080:8080 -h neurodesktop-20220111 \\ vnmd/neurodesktop:20220111  If you get errors in neurodesktop then check if the ~/neurodesktop-storage directory is writable to all users, otherwise run chmod a+rwx ~/neurodesktop-storage  Once neurodesktop is downloaded i.e. guacd[77]: INFO: Listening on host 127.0.0.1, port 4822 is displayed in terminal, open a browser and go to:  http://localhost:8080/#/?username=user\u0026password=password  If using Chrome, a pop-up may open with the text:\n\"http://localhost:8080 wants to See text and images copied to the clipboard\". You should press “Allow”\n neurodesktop is ready to use!   User is user Password is password  Stopping neurodesktop: When done processing your data it is important to stop and remove the container - otherwise the next start or container update will give an error (\"… The container name “/neurodesktop” is already in use…\")\n  Click on the terminal from which you ran neurodesktop\n  Press Ctrl-C\n  Run:\n  docker stop neurodesktop  Run:  docker rm neurodesktop  Installing Docker For general installation instructions, refer to https://docs.docker.com/get-docker/\nRHEL/CentOS (yum-based) Refer to https://docs.docker.com/engine/install/centos/\nOne example to install docker in a yum-based distribution could look like this:\nsudo dnf install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo dnf install docker-ce docker-ce-cli containerd.io sudo systemctl enable docker sudo systemctl start docker sudo docker version sudo docker info sudo groupadd docker sudo usermod -aG docker $USER sudo chown root:docker /var/run/docker.sock newgrp docker  Ubuntu/Debian (apt-based) Refer to https://docs.docker.com/engine/install/ubuntu/\nOne example to install docker in a apt-based distribution could look like this:\nsudo apt-get update sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list  /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io  GPU support RHEL/CentOS (yum-based) sudo yum install nvidia-container-toolkit -y  Running neurodesktop container with GPU sudo docker run \\ --shm-size=1gb -it --privileged --name neurodesktop \\ -v ~/neurodesktop-storage:/neurodesktop-storage \\ -e HOST_UID=\"$(id -u)\" -e HOST_GID=\"$(id -g)\" \\ -e NVIDIA_VISIBLE_DEVICES=all \\ -e NVIDIA_DISABLE_REQUIRE=1 \\ -p 8080:8080 -h neurodesktop-20220111 \\ vnmd/neurodesktop:20220111  Then inside the neurodesktop container run:\n sudo apt update sudo apt install libcudart10.1   For a GPU with Nvidia driver Version \u003e 495.29.05:\n wget https://developer.download.nvidia.com/compute/cuda/11.5.0/local_installers/cuda_11.5.0_495.29.05_linux.run sudo sh ./cuda_11.5.0_495.29.05_linux.run   Running tensorflow (w/ GPU) Using tensorflow (python)  conda install tensorflow-gpu python  \" import tensorflow as tf print(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))  Using tensorflow (singularity container in neurodesktop) singularity pull docker://tensorflow/tensorflow:latest-gpu singularity run --nv tensorflow_latest-gpu.sif python  \" import tensorflow as tf print(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))  Using an RDP Client Startup Neurodesktop using the following command:\nsudo docker run \\ --shm-size=1gb -it --privileged --name neurodesktop \\ -v ~/neurodesktop-storage:/neurodesktop-storage \\ -e HOST_UID=\"$(id -u)\" -e HOST_GID=\"$(id -g)\" \\ -p 3390:3389 -p 8080:8080 -h neurodesktop-20220111 \\ vnmd/neurodesktop:20220111  If you want to connect via RDP using a different port, replace 3390 in the previous and next step with your port  Open your RDP client and connect to Computer localhost:3390\nUse the following details to login if prompted\nusername: user password: password Using VNC To enable VNC and disable RDP, startup Neurodesktop using the following command:\nsudo docker run \\ --shm-size=1gb -it --privileged --name neurodesktop \\ -v ~/neurodesktop-storage:/neurodesktop-storage \\ -e VNC_ENABLE=true -e HOST_UID=\"$(id -u)\" -e HOST_GID=\"$(id -g)\" \\ -p 8080:8080 -h neurodesktop-20220111 \\ vnmd/neurodesktop:20220111  VNC allows for multiple desktop connections to same instance\nNote: Neurodesktop VNC on the browser currently does not support auto-resolution\n Using a VNC Client Needs testing  Startup Neurodesktop using the following command:\nsudo docker run \\ --shm-size=1gb -it --privileged --name neurodesktop \\ -v ~/neurodesktop-storage:/neurodesktop-storage \\ -e VNC_ENABLE=true -e HOST_UID=\"$(id -u)\" -e HOST_GID=\"$(id -g)\" \\ -p 5901:5901 -p 8080:8080 -h neurodesktop-20220111 \\ vnmd/neurodesktop:20220111  Open a VNC Client and connect to port 5901\n","categories":"","description":"Install neurodesktop on Linux\n","excerpt":"Install neurodesktop on Linux\n","ref":"/neurodesk.github.io/docs/neurodesktop/getting-started/linux/","tags":"","title":"Linux"},{"body":"Local Hugo Docsy Clone repository Using SSH\ngit clone --recurse-submodules git@github.com:NeuroDesk/neurodesk.github.io.git\nor Https:\ngit clone --recurse-submodules https://github.com/NeuroDesk/neurodesk.github.io.git\nIf you cloned without –recurse-submodules Run the following command to pull submodules\ngit submodule update --init --recursive --remote\nDownload Hugo binary Hugo releases are on https://github.com/gohugoio/hugo/releases\nDownload latest version of hugo extended\ne.g. for windows: https://github.com/gohugoio/hugo/releases/download/v0.88.1/hugo_extended_0.88.1_Windows-64bit.zip\nStart local hugo server Extract hugo binary (hugo.exe) to your neurodesk.github.io dir\nRun server for windows: .\\hugo.exe server --disableFastRender\nOnce started, dev website will be accessible via http://localhost:1313\nUpdate docsy theme submodule git submodule update --remote git add themes/ git commit -m \"Updating theme submodule\" git push origin hugo-docsy ","categories":"","description":"How to edit the documentation\n","excerpt":"How to edit the documentation\n","ref":"/neurodesk.github.io/developers/documentation/local-hugo-docsy/","tags":"","title":"Local Hugo Docsy"},{"body":"Menu entry As we want to propose several versions of the tools, each piece of software should have its own submenu under VNM Neuroimaging. To do so, you first have to add a submenu to menus/vnm-applications.menu by adding:\n\u003c!-- [[Tool Name]] submenu --\u003e \u003cMenu\u003e \u003cName\u003e[[Tool Name]]\u003c/Name\u003e \u003cDirectory\u003evnm-[[tool-name]].directory\u003c/Directory\u003e \u003cInclude\u003e \u003cAnd\u003e \u003cCategory\u003e[[Tool-Name]]\u003c/Category\u003e \u003c/And\u003e \u003c/Include\u003e \u003c/Menu\u003e \u003c!-- End [[Tool Name]] --\u003e The following table shows the formatting rules to follow:\n   Placeholder Rule Example     [[Tool name]] Capitalized, spaces ITK snap   [[tool-name]] Lower case, no spaces (use - instead) itk-snap or itksnap   [[Tool-name]] Capitalized, no spaces (use - instead) ITK-snap    Next, we have to create the submenu itself as we referenced it by vnm-[[tool-name]].directory. To do so, create the file menus/submenus/vnm-[[tool-name]].directory and add the following information inside:\n[Desktop Entry] Name=[[Tool Name]] Comment=[[Tool Name]] Icon=/home/neuro/.config/lxpanel/LXDE/icons/[[icon-name]].png Type=Directory If a specific icon is available in the menus/icons directory, replace [[icon-name]] by its name. Otherwise, use vnm.\nCreate the application Finally, we have to create the actual application by creating the file menus/applications/vnm-[[tool-name]]-[[0.0.0]].desktop. The name of this file must contain the version of the tool (once again to allow multiple versions to live inside the same directory). Add the following description to this file:\n[Desktop Entry] Name=[[Tool Name]] [[0.0.0]] [[(Install only)]] GenericName=[[Tool Name]] [[0.0.0]] Comment=The description of what clicking on this application does. # This will be the tooltip of the application. Exec=The command used to run the application. Icon=/home/neuro/.config/lxpanel/LXDE/icons/[[icon-name]].png Type=Application Categories=[[Tool-name]] Terminal=true # or false The important part here is the value of Exec. If the tool is in the form of a singularity image, you should run the following command:\nbash /usr/share/fetch_and_run.sh [[tool-name]] [[0.0.0]] [[YYYYMMDD]] [[cmd]] [[args]] What fetch_and_run.sh does is check if the image is already installed as a module. If not, it checks whether it can be installed or not (return 1 if not possible). After that, it installs the image as a module. If [[cmd]] is specified, once the image is installed, it runs the command by giving the arguments from [[args]]. Here are two examples for FreeSurfer and FreeView. This first one only installs the image as a module:\nbash /usr/share/fetch_and_run.sh freesurfer 6.0.1 20200506 And this does the same but runs FreeView afterward:\nbash /usr/share/fetch_and_run.sh freesurfer 6.0.1 20200506 freeview The resulting .desktop file corresponding to FreeView contains:\n[Desktop Entry] Name=FreeView 6.0.1 GenericName=FreeView 6.0.1 Comment=Start FreeView 6.0.1 Exec=bash /usr/share/fetch_and_run.sh freesurfer 6.0.1 20200506 freeview Icon=/home/neuro/.config/lxpanel/LXDE/icons/run.png Type=Application Categories=FreeSurfer Terminal=true ","categories":"","description":"Menu entries in neurodesktop\n","excerpt":"Menu entries in neurodesktop\n","ref":"/neurodesk.github.io/developers/new_tools/menu_entries/","tags":"","title":"Menu entries"},{"body":"Getting started Open Visual Studio Code:\nOpen the folder: “/home/user/Desktop/neurodesktop-storage” or a subfolder in which you would like to store this demo. In this folder, create a new file named “EEGDemo.ipynb” or something similar:\nIf this is your first time opening a Jupyter notebook on vscode in neurodesktop, you will see the following popup. If so, click “install” to install the vscode extensions for Jupyter.\nSet up an environment  Coming soon! Neurodesktop will soon feature a number of built in conda environments for standard analyses of behavioural, physiological, and encephalographic data.\n From the top menu in vscode, select Terminal-\u003eNew Terminal, or hit [Ctrl]+[Shift]+[`]. From this terminal, create and activate a new conda environment in which to run mne-python.\nconda create --name=mne --channel=conda-forge mne python=3 jupyter nb_conda_kernels conda activate mne Once your new environment is activated, in the top right corner of your empty jupyter notebook, click “Select Kernel”:\nThen, select the instance of Python associated with the environment you have just created (“mne”). If your new environment does not appear in the list, you may need to restart vscode:\nAt this point you may also be prompted to install the vscode packages for python. Once you have installed these, you’re ready to rumble!\nDownload sample data In the terminal, input the following code to download some BIDS formatted sample EEG data:\npip install osfclient osf -p C689U fetch Data_sample.zip /neurodesktop-storage/EEGDEMO/Data_sample.zip unzip Data_sample.zip This is a small dataset with only 5 EEG channels from a single participant. The participant is viewing a frequency tagged display and is cued to attend to dots tagged at one frequency or another (6 Hz, 7.5 Hz) for long, 15 s trials. To read more about the dataset, click here\nPlotting settings To make sure our plots retain their interactivity, set the following line at the top of your notebook:\n%matplotlib qt This will mean your figures pop out as individual, interactive plots that will allow you to explore the data, rather than as static, inline plots. You can switch “qt” to “inline” to switch back to default, inline plotting.\nLoading and processing data  NOTE: MNE has many helpful tutorials which delve into data processing and analysis using MNE-python in much further detail. These can be found here\n Begin by importing the necessary modules and creating a pointer to the data:\n# Interactive plotting %matplotlib qt # Import modules import os import numpy as np import mne # Load data sample_data_folder = '/home/user/Desktop/neurodesktop-storage/EEGDemo/Data_sample' sample_data_raw_file = os.path.join(sample_data_folder, 'sub-01', 'eeg', 'sub-01_task-FeatAttnDec_eeg.vhdr') raw = mne.io.read_raw_brainvision(sample_data_raw_file , preload=True) the raw.info structure contains information about the dataset:\n# Display data info print(raw) print(raw.info) This data file did not include a montage. Lets create one using standard values for the electrodes we have:\n# Create montage montage = {'Iz': [0, -110, -40], 'Oz': [0, -105, -15], 'POz': [0, -100, 15], 'O1': [-40, -106, -15], 'O2': [40, -106, -15], } montageuse = mne.channels.make_dig_montage(ch_pos=montage, lpa=[-82.5, -19.2, -46], nasion=[0, 83.2, -38.3], rpa=[82.2, -19.2, -46]) # based on mne help file on setting 10-20 montage Next, lets visualise the data.\nraw.plot() This should open an interactive window in which you can scroll through the data. See the MNE documentation for help on how to customise this plot.\nIf, upon visual inspection, you decide to exclude one of the channels, you can specify this in raw.info[‘bads’] now. For example:\nraw.info['bads'] = ['POz'] Next, we’ll extract our events. The trigger channel in this file is incorrectly scaled, so we’ll correct that before we extract our events:\n# Correct trigger scaling trigchan = raw.pick('TRIG').copy() trigchan._data = trigchan._data*1000000 # Extract events events = mne.find_events(trigchan, stim_channel='TRIG', consecutive=True, initial_event=True, verbose=True) print('Found %s events, first five:' % len(events)) print(events[:5]) # Plot events mne.viz.plot_events(events, raw.info['sfreq'], raw.first_samp) Now that we’ve extracted our events, we can extract our EEG channels and do some simple pre-processing:\n# select eeg_data = raw.copy().pick_types(eeg=True, exclude=['TRIG']) # Set montage eeg_data.info.set_montage(montageuse) # Interpolate eeg_data_interp = eeg_data.copy().interpolate_bads(reset_bads=True) # Filter Data eeg_data_interp.filter(l_freq=1, h_freq=45, h_trans_bandwidth=0.1) Let’s visualise our data again now that it’s cleaner:\n#plot results again, this time with some events and scaling. eeg_data_interp.plot(events=events, duration=10.0, scalings=dict(eeg=0.00005), color='k', event_color='r') That’s looking good! We can even see hints of the frequency tagging. It’s about time to epoch our data.\n# Epoch to events of interest event_id = {'attend 6Hz K': 23, 'attend 7.5Hz K': 27} # Extract 15 s epochs relative to events, baseline correct, linear detrend, and reject # epochs where eeg amplitude is \u003e 400 epochs = mne.Epochs(eeg_data_interp, events, event_id=event_id, tmin=0, tmax=15, baseline=(0, 0), reject=dict(eeg=0.000400), detrend=1) # Drop bad trials epochs.drop_bad() We can average these epochs to form Event Related Potentials (ERPs):\n# Average erpochs to form ERPs attend6 = epochs['attend 6Hz K'].average() attend75 = epochs['attend 7.5Hz K'].average() # Plot ERPs evokeds = dict(attend6=list(epochs['attend 6Hz K'].iter_evoked()), attend75=list(epochs['attend 7.5Hz K'].iter_evoked())) mne.viz.plot_compare_evokeds(evokeds, combine='mean') In this plot, we can see that the data are frequency tagged. While these data were collected, the participant was performing an attention task in which two visual stimuli were flickering at 6 Hz and 7.5 Hz respectively. On each trial the participant was cued to monitor one of these two stimuli for brief bursts of motion. From previous research, we expect that the steady-state visual evoked potential (SSVEP) should be larger at the attended frequency than the unattended frequency. Lets check if this is true.\nWe’ll begin by exporting our epoched EEG data to a numpy array\n# Preallocate n_samples = attend6.data.shape[1] sampling_freq = 1200 # sampling frequency epochs_np = np.empty((n_samples, 2) ) # Get data - averaging across EEG channels epochs_np[:,0] = attend6.data.mean(axis=0) epochs_np[:,1] = attend75.data.mean(axis=0) Next, we can use a Fast Fourier Transform (FFT) to transform the data from the time domain to the frequency domain. For this, we’ll need to import the FFT packages from scipy:\nfrom scipy.fft import fft, fftfreq, fftshift # Get FFT fftdat = np.abs(fft(epochs_np, axis=0)) / n_samples freq = fftfreq(n_samples, d=1 / sampling_freq) # get frequency bins Now that we have our frequency transformed data, we can plot our two conditions to assess whether attention altered the SSVEP amplitudes:\nimport matplotlib.pyplot as plt fig,ax = plt.subplots(1, 1) ax.plot(freq, fftdat[:,0], '-', label='attend 6Hz', color=[78 / 255, 185 / 255, 159 / 255]) ax.plot(freq, fftdat[:,1], '-', label='attend 7.5Hz', color=[236 / 255, 85 / 255, 58 / 255]) ax.set_xlim(4, 17) ax.set_ylim(0, 1e-6) ax.set_title('Frequency Spectrum') ax.legend() This plot shows that the SSVEPs were indeed modulated by attention in the direction we would expect! Congratulations! You’ve run your first analysis of EEG data in neurodesktop.\n","categories":"","description":"Use mne-python to load, pre-process, and plot example EEG data in a jupyter notebook through vscode. \n","excerpt":"Use mne-python to load, pre-process, and plot example EEG data in a …","ref":"/neurodesk.github.io/tutorials/electrophysiology/eeg_mne-python/","tags":"","title":"Analysing EEG Data with MNE"},{"body":" This tutorial was created by Kelly G. Garner.\nEmail: getkellygarner@gmail.com\nGithub: @kel_github\nTwitter: @garnertheory\n  This workflow documents how to use mriqc with neurodesk and provides some details that may help you troubleshoot some common problems I found along the way.\n  Assumptions  Your data is already in BIDS format (https://github.com/NeuroDesk/neurodesk.github.io). You plan to run mriqc using Neurodesk   Steps Open mriqc From the applications go Neurodesk -\u003e Functional Imaging -\u003e mriqc and select the latest version of mriqc. This should take you to a terminal window with mriqc loaded. \nSetting up mriqc command If you like, you can enter the following mriqc commands straight into the command line in the newly opened terminal. However, as with increasing options and preferences the command can get rather verbose, so I instead opted to create executable bash scripts that I can run straight from the command line, with minimal editing inbetween runs. I made one for running mriqc at the participant level, and one for running at the group level (for the group report, once all the participants are done). If you’re not interested in this option you can skip straight to copying/adjusting the code from mriqc to -v below.\n open a new file in your editor of choice (e.g. Visual Studio Code) save that file with your chosen name without an extension, e.g. run_mriqc_participant or run_mriqc_group paste in the following and update with your details  #!/bin/bash # # written by A. Name - the purpose of this code is to run mriqc with neurodesk export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=6 # specify the number of threads you want to use mriqc /path/to/your/data \\ # this is the top level of your data folder /path/to/your/data/derivatives \\ # where you want mriqc output to be saved participant \\ # this tells mriqc to analyse at the participant level --participant-label 01 \\ # put what ever participant labels you want to analyse --work-dir /path/to/work/directory \\ #useful to specify so your home directory definitely doesnt get clogged --nprocs 6 --mem_gb 10000 \\ # mriqc can be greedy on the hpc, make sure it is not -v # be verbal mriqc, tell me what you are doing OR: if you have run all the participants and you just want the group level report, use these mriqc commands instead:\nmriqc /path/to/your/data \\ # this is the top level of your data folder /path/to/your/data/derivatives \\ # where you want mriqc output to be saved. As you are running the group level analysis this folder should be prepopulated with the results of the participant level analysis group \\ # this tells mriqc to agive you the group report -w /path/to/work/directory \\ #useful to specify so your home directory definitely doesnt get clogged --nprocs 6 --mem_gb 10000 \\ # mriqc can be greedy on the hpc, make sure it is not -v # be verbal mriqc, tell me what you are doing To make either of yours files executable, navigate via the terminal to the same folder in which this file is saved. If you list the files in the folder by using the command ls you should see your file with the name printed in white.\nmriqc command pre executable\nNow type the following command:\nchmod u+x run_mriqc_participant # this tells the system to make your new file executable To know this worked, list the files again. If you have successfully made your file executable then it will be listed in green.\nmriqc command now executable\nThen to run your new executable, return to your terminal window for mriqc (that opened when you navigated to mriqc), navigate to the directory where your executable file is stored and type:\n./name_of_your_mriqc_file mriqc should now be merrily working away on your data :)\n Some common pitfalls I have learned from my mistakes (and sometimes from others)  If running on a HPC, make sure to set the processor and memory limits, if not your job will get killed because mriqc hogs all the resources.  ","categories":"","description":"A brief guide to using mriqc with neurodesk, using data from the STRIAVISE project.\n","excerpt":"A brief guide to using mriqc with neurodesk, using data from the …","ref":"/neurodesk.github.io/tutorials/functional_imaging/mriqc_cvl/","tags":["mriqc","documentation","preprocessing"],"title":"Using mriqc with neurodesk on HPC"},{"body":"Video tutorial Click here to watch a 2 minute tutorial video from OHBM 2021\nIntroduction Neurodesk provides a containerised data analysis environment to facilitate reproducible analysis of neuroimaging data. At Neurodesk, we believe that reproducibility should be a fundamental principle underlying neuroscientific data analysis (1). Analysis pipelines for neuroimaging data typically rely on specific versions of packages and software, and are dependent on their native operating system. These dependencies mean that a working analysis pipeline may fail or produce different results on a new computer, or even on the same computer after a software update. Neurodesk provides a platform in which anyone, anywhere, using any computer can reproduce your original research findings given the original data and analysis code.\nWhat is a container? The Neurodesk environment allows users to build and use containers for analysing neuroimaging data. Containers can be compared to virtual machines, in that they allow users to create a virtual, isolated computing environment with an operating system separate to that of the host machine. However, containers differ from virtual machines in that they virtualise software rather than hardware. Practically, this means that container images require few system resources to install, start-up quickly, and are easily portable between computers.\nWe recomment watching this excellent short video from the Australian Research Data Commons (ARDC) on research applications of software containers. To read more about Docker containers, visit the Docker webpage\nThe Neurodesk ecosystem The Neurodesk ecosystem includes a number of tools for containerised analysis of neuroimaging data. These include:\nNeurodesktop  If you’re new to Neurodesk, we recommend you begin with Neurodesktop.\n Neurodesktop is a compact Docker container with a browser-accessible virtual desktop that allows you develop and implement data analysis pipelines as though you’re on your own computer. The neurodesktop container has the basic tools required for the analysis of fMRI and EEG data pre-installed. To get started, see: Neurodesktop\nNeurocommand Neurocommand offers the option to install and manage multiple distinct containers for more advanced users who prefer a command-line interface. Neurocommand is the recommended interface for users seeking to use Neurodesk in high performance computing (HPC) environments.\nTo get started, see: Neurocommand\nTransparent-singularity The applications pre-installed in neurodesktop and neurocommand are accessible through transparent-singularity, which allows users to transparently use containerised software as through it were installed natively.\nTo find out more about this open-source project, see: transparent-singularity\nNeurocontainers The neurocontainers repository contains build scripts for sub-containers which are wrapped around executables for neuroimaging data-analysis software. These neurocontainers can be used in combination with neurocommand or transparent-singularity.\nTo get started, see: Neurocontainers\nNeurodocker Neurodocker is a command-line program that generates custom Dockerfiles and Singularity recipes for neuroimaging and minifies existing containers.\nTo find out more about this open-source project, see: Neurodocker\nReferences    National Academies of Sciences, Engineering, and Medicine. 2019. Reproducibility and Replicability in Science. Washington, DC: The National Academies Press. https://doi.org/10.17226/25303.    ","categories":"","description":"A flexible, scalable and easy to use data analysis environment for reproducible neuroimaging.\n","excerpt":"A flexible, scalable and easy to use data analysis environment for …","ref":"/neurodesk.github.io/docs/overview/","tags":"","title":"Neurodesk Overview"},{"body":"Purpose The general purpose of the PhysIO toolbox is model-based physiological noise correction of fMRI data using peripheral measures of respiration and cardiac pulsation (respiratory bellows, ECG, pulse oximeter/plethysmograph).\nIt incorporates noise models of\n cardiac/respiratory phase (RETROICOR, Glover et al. 2000), as well as heart rate variability and respiratory volume per time (cardiac response function, Chang et. al, 2009, respiratory response function, Birn et al. 2006), and extended motion models (e.g., censoring/scrubbing)  While the toolbox is particularly well integrated with SPM via the Batch Editor GUI, its output text files can be incorporated into any major neuroimaging analysis package for nuisance regression, e.g., within a GLM.\nCore design goals for the toolbox were: flexibility, robustness, and quality assurance to enable physiological noise correction for large-scale and multi-center studies.\nSome highlights:\n Robust automatic preprocessing of peripheral recordings via iterative peak detection, validated in noisy data and patients, and extended processing of respiratory data (Harrison et al., 2021) Flexible support of peripheral data formats (BIDS, Siemens, Philips, GE, BioPac, HCP, …) and noise models (RETROICOR, RVHRCOR). Fully automated noise correction and performance assessment for group studies. Integration in fMRI pre-processing pipelines as SPM Toolbox (Batch Editor GUI).  The accompanying technical paper about the toolbox concept and methodology can be found at: https://doi.org/10.1016/j.jneumeth.2016.10.019\nSee more info about PhysIO (incl. relevant papers to cite and FAQ) in the online README on GitHub. PhysIO is part of the TAPAS Software Collection GitHub, and its Matlab version is exclusively hosted there.\nNeuroDesk offers the possibility of running PhysIO without installing Matlab or requiring a Matlab license. The functionality should be equivalent, though debugging and extending the toolbox, as well as unreleased development features, will only be available in the Matlab version of PhysIO.\nDownload Example Data The example data should already be present in NeuroDesk in the following folder /opt/spm12\nIf you cannot find the example data there:\n Download the latest version from the location mentioned in the TAPAS distribution  e.g., https://www.tapas.tnu-zurich.com/examples_v5.0.0.zip   Follow the instructions for copying your own data in the next section  Copy your own data  On Windows, the folder C:\\neurodesktop-storage should have been automatically created when starting NeuroDesk This is your direct link to the NeuroDesk environment, and anything you put in there should end up within the NeuroDesk desktop in /neurodesktop-storage/  Example: Running PhysIO in the GUI  Open the PhysIO GUI (Neurodesk -\u003e Functional Imaging -\u003e physio -\u003e physioGUI r7771, see screenshot:  SPM should automatically open up (might take a while). Select ‘fMRI’ from the modality selection screen. Press the “Batch Editor” button (see screenshot with open Batch Editor, red highlights)  - NB: If you later want to create a new PhysIO batch with all parameters, from scratch or explore the options, select from the Batch Editor Menu top row, SPM -\u003e Tools -\u003e TAPAS PhysIO Toolbox (see screenshot, read highlights)  For now, load an existing example (or previously created SPM Batch File) as follows: It is most convenient to change the working directory of SPM to the location of the physiological logfiles  In the Batch Editor GUI, lowest row, choose ‘CD’ from the ‘Utils..’ dropdown menu Navigate to any of the example folders, e.g., /opt/spm12/examples/Philips/ECG3T/ and select it NB: you can skip this part, if you later manually update all input files in the Batch Editor window (resp/cardiac/scan timing and realignment parameter file further down) Any other example should also work the same way, just CD to its folder before the next step   Select File -\u003e Load Batch from the top row menu of the Batch Editor window  make sure you select the matlab batch file *_spm_job.\u003cm|mat\u003e, (e.g., philips_ecg3t_spm_job.m and philips_ecg3t_spm_job.mat are identical, either is fine), but not the script.   Press The green “Play” button in the top icon menu row of the Batch Editor Window Several output figures should appear, with the last being a grayscale plot of the nuisance regressor design matrix  Congratulations, your first successful physiological noise model has been created! If you don’t see the mentioned figure, chances are certain input files were not found (e.g., wrong file location specified). You can always check the text output in the “bash” window associated with the SPM window for any error messages.  Further Info on PhysIO Please check out the README and FAQ\n","categories":"","description":"Example workflow for the PhysIO Toolbox\n","excerpt":"Example workflow for the PhysIO Toolbox\n","ref":"/neurodesk.github.io/tutorials/functional_imaging/physio/","tags":"","title":"PhysIO"},{"body":"If you want more speed in a region one way could be to setup another Stratum 1 server or a proxy. We currently don’t run any proxy servers but it would be important for using it on a cluster.\n\" data-output=\"2-4\" docker run --shm-size=1gb -it --privileged --name neurodesktop ` -v C:/neurodesktop-storage:/neurodesktop-storage -p 8080:8080 ` -h neurodesktop-20220111 ` vnmd/neurodesktop:20220111  Setup a CVMFS proxy server sudo yum install -y squid  Open the squid.confand use the following configuration\nsudo vi /etc/squid/squid.conf  # List of local IP addresses (separate IPs and/or CIDR notation) allowed to access your local proxy #acl local_nodes src YOUR_CLIENT_IPS # Destination domains that are allowed #acl stratum_ones dstdomain .YOURDOMAIN.ORG #acl stratum_ones dstdom_regex YOUR_REGEX acl stratum_ones dst 140.238.211.92 # Squid port http_port 3128 # Deny access to anything which is not part of our stratum_ones ACL. http_access deny !stratum_ones # Only allow access from our local machines #http_access allow local_nodes http_access allow localhost # Finally, deny all other access to this proxy http_access deny all minimum_expiry_time 0 maximum_object_size 1024 MB cache_mem 128 MB maximum_object_size_in_memory 128 KB # 5 GB disk cache cache_dir ufs /var/spool/squid 5000 16 256   sudo squid -k parse sudo systemctl start squid sudo systemctl enable squid sudo systemctl status squid sudo systemctl restart squid  ","categories":"","description":"Setup CVMFS Proxy server\n","excerpt":"Setup CVMFS Proxy server\n","ref":"/neurodesk.github.io/developers/cvmfs/proxy/","tags":"","title":"Setup CVMFS Proxy"},{"body":"Quantitative Susceptibility Mapping in QSMxT Neurodesk includes QSMxT, a complete and end-to-end QSM processing and analysis framework that excels at automatically reconstructing and processing QSM for large groups of participants.\nQSMxT provides pipelines implemented in Python that:\n Automatically convert DICOM data to the Brain Imaging Data Structure (BIDS) Automatically reconstruct QSM, including steps for:  Robust masking without anatomical priors Phase unwrapping (Laplacian based) Background field removal + dipole inversion (tgv_qsm) Multi-echo combination   Automatically generate a common group space for the whole study, as well as average magnitude and QSM images that facilitate group-level analyses. Automatically segment T1w data and register them to the QSM space to extract quantitative values in anatomical regions of interest. Export quantitative data to CSV for all subjects using the automated segmentations, or a custom segmentation in the group space (we recommend ITK snap).  If you use QSMxT for a study, please cite https://doi.org/10.1101/2021.05.05.442850.\nDownload demo data Open a terminal and run:\npip install osfclient cd /neurodesktop-storage/ osf -p ru43c clone /neurodesktop-storage/qsmxt-demo unzip /neurodesktop-storage/qsmxt-demo/osfstorage/GRE_2subj_1mm_TE20ms/sub1/GR_M_5_QSM_p2_1mmIso_TE20.zip -d /neurodesktop-storage/qsmxt-demo/dicoms unzip /neurodesktop-storage/qsmxt-demo/osfstorage/GRE_2subj_1mm_TE20ms/sub1/GR_P_6_QSM_p2_1mmIso_TE20.zip -d /neurodesktop-storage/qsmxt-demo/dicoms unzip /neurodesktop-storage/qsmxt-demo/osfstorage/GRE_2subj_1mm_TE20ms/sub2/GR_M_5_QSM_p2_1mmIso_TE20.zip -d /neurodesktop-storage/qsmxt-demo/dicoms unzip /neurodesktop-storage/qsmxt-demo/osfstorage/GRE_2subj_1mm_TE20ms/sub2/GR_P_6_QSM_p2_1mmIso_TE20.zip -d /neurodesktop-storage/qsmxt-demo/dicoms QSMxT Usage Start QSMxT (in this demo we used 1.1.6) from the applications menu in the desktop (Neurodesk \u003e Quantitative Imaging \u003e qsmxt)\n Convert DICOM data to BIDS: cd /neurodesktop-storage/qsmxt-demo python3 /opt/QSMxT/run_0_dicomSort.py /neurodesktop-storage/qsmxt-demo/dicoms 00_dicom python3 /opt/QSMxT/run_1_dicomToBids.py 00_dicom 01_bids   After this step check if the data were correctly recognized and converted to BIDS. Otherwise make a copy of /opt/QSMxT/bidsmap.yaml - adjust based on provenance example in 01_bids/code/bidscoin/bidsmap.yaml (see for example what it detected under extra_files) - and run again with the parameter --heuristic bidsmap.yaml. If the data were acquired on a GE scanner the complex data needs to be corrected by applying an FFT shift, this can be done with python /opt/QSMxT/run_1_fixGEphaseFFTshift.py 01_bids/sub*/ses*/anat/*_run-1_*.nii.gz .\nRun QSM pipeline: python3 /opt/QSMxT/run_2_qsm.py 01_bids 02_qsm_output   ","categories":"","description":"Example workflow for Quantitative Susceptibility Mapping\n","excerpt":"Example workflow for Quantitative Susceptibility Mapping\n","ref":"/neurodesk.github.io/tutorials/phase_processing/qsm/","tags":"","title":"Quantitative Susceptibility Mapping"},{"body":" Check if the last automated build ran OK: https://github.com/NeuroDesk/neurodesktop/actions Run this build date and test if everything is ok and no regression happened Check what changes where made since the last release: https://github.com/NeuroDesk/neurodesktop/commits/main Summarize the main changes and copy this to the Release History and the news section:   https://neurodesk.github.io/docs/neurodesktop/release-history/ https://neurodesk.github.io/blog/releases/  Change the version of the latest desktop in https://github.com/NeuroDesk/neurodesk.github.io/blob/hugo-docsy/data/neurodesktop.toml Commit all changes Tweet a quick summary of the changes and announce new version: https://twitter.com/neuro_desk  ","categories":"","description":"A description of what to do to create new release of our Neurodesktop\n","excerpt":"A description of what to do to create new release of our Neurodesktop\n","ref":"/neurodesk.github.io/developers/architecture/release_process/","tags":"","title":"Neurodesktop Release Process"},{"body":"We store our singuarlity containers unpacked on CVMFS. We tried the DUCC tool in the beginning, but it was causing too many issues with dockerhub and we were rate limited. The script to unpack our singularity containers is here: https://github.com/NeuroDesk/neurocommand/blob/main/cvmfs/sync_containers_to_cvmfs.sh\nIt gets called by a cronjob on the CVMFS Stratum 0 server and relies on the log.txt file being updated via an action in the neurocommand repository (https://github.com/NeuroDesk/neurocommand/blob/main/.github/workflows/upload_containers_simg.sh)\nThe Stratum 1 servers then pull this repo from Stratum 0 and our desktops mount these repos (configured here: https://github.com/NeuroDesk/neurodesktop/blob/main/Dockerfile)\nThe startup script (https://github.com/NeuroDesk/neurodesktop/blob/main/config/startup.sh) sets up CVMFS and tests which server is fastest during the container startup.\nThis can also be done manually:\nsudo cvmfs_talk -i neurodesk.ardc.edu.au host info sudo cvmfs_talk -i neurodesk.ardc.edu.au host probe cvmfs_config stat -v neurodesk.ardc.edu.au  ","categories":"","description":"CVMFS architecture\n","excerpt":"CVMFS architecture\n","ref":"/neurodesk.github.io/developers/cvmfs/cvmfs_architecture/","tags":"","title":"CVMFS architecture"},{"body":"Setup a Stratum 0 server: Setup Storage (would object storage be better? -\u003e see comment below under next iteration ideas)\nlsblk -l sudo mkfs.ext4 /dev/vdb sudo mkdir /storage sudo mount /dev/vdb /storage/ -t auto sudo chown ec2-user /storage/ sudo chmod a+rwx /storage/  sudo vi /etc/fstab /dev/vdb /storage auto defaults,nofail 0 2  Setup server sudo yum install vim htop gcc git screen sudo timedatectl set-timezone Australia/Brisbane sudo yum install -y https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest.noarch.rpm sudo yum install -y cvmfs cvmfs-server sudo systemctl enable httpd sudo systemctl restart httpd # sudo systemctl stop firewalld # restore keys: sudo mkdir /etc/cvmfs/keys/incoming sudo chmod a+rwx /etc/cvmfs/keys/incoming cd connections/cvmfs_keys/ scp neuro* ec2-user@203.101.226.164:/etc/cvmfs/keys/incoming sudo mv /etc/cvmfs/keys/incoming/* /etc/cvmfs/keys/ #backup keys: #mkdir cvmfs_keys #scp opc@158.101.127.61:/etc/cvmfs/keys/neuro* . sudo cvmfs_server mkfs -o $USER neurodesk.ardc.edu.au cd /storage sudo mkdir -p cvmfs-storage/srv/ cd /srv/ sudo mv cvmfs/ /storage/cvmfs-storage/srv/ sudo ln -s /storage/cvmfs-storage/srv/cvmfs/ cd /var/spool sudo mkdir /storage/spool sudo mv cvmfs/ /storage/spool/ sudo ln -s /storage/spool/cvmfs . cvmfs_server transaction neurodesk.ardc.edu.au cvmfs_server publish neurodesk.ardc.edu.au  sudo vi /etc/cron.d/cvmfs_resign  0 11 * * 1 root /usr/bin/cvmfs_server resign neurodesk.ardc.edu.au  cat /etc/cvmfs/keys/neurodesk.ardc.edu.au.pub  MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuV9JBs9uXBR83qUs7AiE nSQfvh6VCdNigVzOfRMol5cXsYq3cFy/Vn1Nt+7SGpDTQArQieZo4eWC9ww2oLq0 vY1pWyAms3Y4i+IUmMbwNifDU4GQ1KN9u4zl9Peun2YQCLE7mjC0ZLQtLM7Q0Z8h NwP8jRJTN+u8mRKzkyxfSMLscVMKhm2pAwnT1zB9i3bzVV+FSnidXq8rnnzNHMgv tfqx1h0gVyTeodToeFeGG5vq69wGZlwEwBJWVRGzzr+a8dWNBFMJ1HxamrBEBW4P AxOKGHmQHTGbo+tdV/K6ZxZ2Ry+PVedNmbON/EPaGlI8Vd0fascACfByqqeUEhAB dQIDAQAB -----END PUBLIC KEY-----  Next iteration of this: use object storage?  current implementation uses block storage, but this makes increasing the volume size a bit more work we coulddn’t get object storage to work on Oracle as it assumes AWS S3  Optimize settings for repositories for Container Images from the CVMFS documentation: Repositories containing Linux container image contents (that is: container root file systems) should use overlayfs as a union file system and have the following configuration:\nCVMFS_INCLUDE_XATTRS=true CVMFS_VIRTUAL_DIR=true  Extended attributes of files, such as file capabilities and SElinux attributes, are recorded. And previous file system revisions can be accessed from the clients.\nCurrently not used We tested the DUCC tool in the beginning, but it was leading to too many docker pulls and we therefore replaced it with our own script: https://github.com/NeuroDesk/neurocommand/blob/main/cvmfs/sync_containers_to_cvmfs.sh\nThis is the old DUCC setup\nsudo yum install cvmfs-ducc.x86_64 sudo -i dnf install -y yum-utils yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo dnf install docker-ce docker-ce-cli containerd.io systemctl enable docker systemctl start docker docker version docker info # leave root mode sudo groupadd docker sudo usermod -aG docker $USER sudo chown root:docker /var/run/docker.sock newgrp docker vi convert_appsjson_to_wishlist.sh export DUCC_DOCKER_REGISTRY_PASS=configure_secret_password_here_and_dont_push_to_github cd neurodesk git pull ./gen_cvmfs_wishlist.sh cvmfs_ducc convert recipe_neurodesk_auto.yaml cd .. chmod +x convert_appsjson_to_wishlist.sh git clone https://github.com/NeuroDesk/neurodesk/ # setup cron job sudo vi /etc/cron.d/cvmfs_dockerpull */5 * * * * opc cd ~ \u0026\u0026 bash /home/opc/convert_appsjson_to_wishlist.sh #vi recipe.yaml ##version: 1 #user: vnmd #cvmfs_repo: neurodesk.ardc.edu.au #output_format: '$(scheme)://$(registry)/vnmd/thin_$(image)' #input: #- 'https://registry.hub.docker.com/vnmd/tgvqsm_1.0.0:20210119' #- 'https://registry.hub.docker.com/vnmd/itksnap_3.8.0:20201208' #cvmfs_ducc convert recipe_neurodesk.yaml #cvmfs_ducc convert recipe_unpacked.yaml   ","categories":"","description":"Host a Stratum 0 server\n","excerpt":"Host a Stratum 0 server\n","ref":"/neurodesk.github.io/developers/cvmfs/stratum0/","tags":"","title":"Setup Stratum 0 server"},{"body":"The stratum 1 servers for the desktop are configured here: https://github.com/NeuroDesk/neurodesktop/blob/main/Dockerfile\nIf you want more speed in a region one way could be to setup another Stratum 1 server or a proxy.\nSetup a Stratum 1 server: sudo yum install -y https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest.noarch.rpm sudo yum install -y cvmfs-server squid sudo yum install -y python3-mod_wsgi sudo sed -i 's/Listen 80/Listen 127.0.0.1:8080/' /etc/httpd/conf/httpd.conf set +H echo \"http_port 80 accel\" | sudo tee /etc/squid/squid.conf echo \"http_port 8000 accel\" | sudo tee -a /etc/squid/squid.conf echo \"http_access allow all\" | sudo tee -a /etc/squid/squid.conf echo \"cache_peer 127.0.0.1 parent 8080 0 no-query originserver\" | sudo tee -a /etc/squid/squid.conf echo \"acl CVMFSAPI urlpath_regex ^/cvmfs/[^/]*/api/\" | sudo tee -a /etc/squid/squid.conf echo \"cache deny !CVMFSAPI\" | sudo tee -a /etc/squid/squid.conf echo \"cache_mem 128 MB\" | sudo tee -a /etc/squid/squid.conf sudo systemctl start httpd sudo systemctl start squid sudo systemctl enable httpd sudo systemctl enable squid echo 'CVMFS_GEO_LICENSE_KEY=kGepdzqbAP4fjf5X' | sudo tee -a /etc/cvmfs/server.local sudo chmod 600 /etc/cvmfs/server.local sudo mkdir -p /etc/cvmfs/keys/ardc.edu.au/ echo \"-----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwUPEmxDp217SAtZxaBep Bi2TQcLoh5AJ//HSIz68ypjOGFjwExGlHb95Frhu1SpcH5OASbV+jJ60oEBLi3sD qA6rGYt9kVi90lWvEjQnhBkPb0uWcp1gNqQAUocybCzHvoiG3fUzAe259CrK09qR pX8sZhgK3eHlfx4ycyMiIQeg66AHlgVCJ2fKa6fl1vnh6adJEPULmn6vZnevvUke I6U1VcYTKm5dPMrOlY/fGimKlyWvivzVv1laa5TAR2Dt4CfdQncOz+rkXmWjLjkD 87WMiTgtKybsmMLb2yCGSgLSArlSWhbMA0MaZSzAwE9PJKCCMvTANo5644zc8jBe NQIDAQAB -----END PUBLIC KEY-----\" | sudo tee /etc/cvmfs/keys/ardc.edu.au/neurodesk.ardc.edu.au.pub sudo cvmfs_server add-replica -o $USER http://203.101.226.164/cvmfs/neurodesk.ardc.edu.au /etc/cvmfs/keys/ardc.edu.au # CVMFS will store everything in /srv/cvmfs so make sure there is enough space or create a symlink to a bigger storage volume # e.g.: sudo cvmfs_server snapshot neurodesk.ardc.edu.au echo \"/var/log/cvmfs/*.log { weekly missingok notifempty }\" | sudo tee /etc/logrotate.d/cvmfs echo '*/5 * * * * root output=$(/usr/bin/cvmfs_server snapshot -a -i 2\u00261) || echo \"$output\" ' | sudo tee /etc/cron.d/cvmfs_stratum1_snapshot sudo yum install iptables sudo iptables -t nat -A PREROUTING -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8000 sudo systemctl disable firewalld sudo systemctl stop firewalld # make sure that port 80 is open in the real firewall sudo cvmfs_server update-geodb   ","categories":"","description":"Host a Stratum 1 server\n","excerpt":"Host a Stratum 1 server\n","ref":"/neurodesk.github.io/developers/cvmfs/stratum1/","tags":"","title":"Setup Stratum 1 server"},{"body":"Download demo data Open a terminal and run:\npip install osfclient cd /neurodesktop-storage/ osf -p ru43c fetch 01_bids.zip /neurodesktop-storage/swi-demo/01_bids.zip unzip /neurodesktop-storage/swi-demo/01_bids.zip -d /neurodesktop-storage/swi-demo/ Open the CLEARSWI tool from the application menu:\npaste this julia script in a julia file and execute:\ncd /neurodesktop-storage/ vi clearswi.jl hit a or i and then paste this:\nusing CLEARSWI TEs = [20] nifti_folder = \"/neurodesktop-storage/swi-demo/01_bids/sub-170705134431std1312211075243167001/ses-1/anat\" magfile = joinpath(nifti_folder, \"sub-170705134431std1312211075243167001_ses-1_acq-qsm_run-1_magnitude.nii.gz\") phasefile = joinpath(nifti_folder, \"sub-170705134431std1312211075243167001_ses-1_acq-qsmPH00_run-1_phase.nii.gz\") mag = readmag(magfile); phase = readphase(phasefile); data = Data(mag, phase, mag.header, TEs); swi = calculateSWI(data); # mip = createIntensityProjection(swi, minimum); # minimum intensity projection, other Julia functions can be used instead of minimum mip = createMIP(swi); # shorthand for createIntensityProjection(swi, minimum) savenii(swi, \"/neurodesktop-storage/swi-demo/swi.nii\"; header=mag.header) savenii(mip, \"/neurodesktop-storage/swi-demo/mip.nii\"; header=mag.header) hit SHIFT-Z-Z and run:\njulia clearswi.jl Open ITK snap from the Visualization Application’s menu and inspect the results (the outputs are in swi-demo/swi.nii and mip.nii) ","categories":"","description":"Example workflow for SWI processing\n","excerpt":"Example workflow for SWI processing\n","ref":"/neurodesk.github.io/tutorials/phase_processing/swi/","tags":"","title":"SWI"},{"body":"Download demo data Open a terminal and run:\npip install osfclient cd /neurodesktop-storage/ osf -p ru43c fetch 01_bids.zip /neurodesktop-storage/swi-demo/01_bids.zip unzip /neurodesktop-storage/swi-demo/01_bids.zip -d /neurodesktop-storage/swi-demo/ mkdir /neurodesktop-storage/romeo-demo/ cp /neurodesktop-storage/swi-demo/01_bids/sub-170705134431std1312211075243167001/ses-1/anat/sub-170705134431std1312211075243167001_ses-1_acq-qsmPH00_run-1_phase.nii.gz /neurodesktop-storage/romeo-demo/phase.nii.gz cp /neurodesktop-storage/swi-demo/01_bids/sub-170705134431std1312211075243167001/ses-1/anat/sub-170705134431std1312211075243167001_ses-1_acq-qsm_run-1_magnitude.nii.gz /neurodesktop-storage/romeo-demo/mag.nii.gz gunzip /neurodesktop-storage/romeo-demo/mag.nii.gz gunzip /neurodesktop-storage/romeo-demo/phase.nii.gz Using ROMEO for phase unwrapping Open the ROMEO tool from the application menu and run:\nromeo -p /neurodesktop-storage/romeo-demo/phase.nii -m /neurodesktop-storage/romeo-demo/mag.nii -k nomask -o /neurodesktop-storage/romeo-demo/ ","categories":"","description":"MRI Phase Unwrapping\n","excerpt":"MRI Phase Unwrapping\n","ref":"/neurodesk.github.io/tutorials/phase_processing/unwrapping/","tags":"","title":"Unwrapping"},{"body":"a short description of your workflow. This will form the subheading for the tutorial page. Once you've filled out those details, you can delete this comment block. --  This tutorial was created by Name P. Namington.\nEmail: n.namington@institution.edu.au\nGithub: @Namesgit\nTwitter: @Nameshandle\n Welcome to the workflow template, which you can use to contribute your own neurodesk workflow to our documentation. We aim to collect a wide variety of workflows representing the spectrum of tools available under the neurodesk architechture and the diversity in how researchers might apply them. Please add plenty of descriptive detail and make sure that all steps of the workflow work before submitting the tutorial.\nHow to contribute a new workflow Begin by creating a copy of our documentation that you can edit:\n Visit the github repository for the Neurodesk documentation (https://github.com/NeuroDesk/neurodesk.github.io). Fork the repository.   You should now have your own copy of the documentation, which you can alter without affecting our official documentation. You should see a panel stating “This branch is up to date with Neurodesk:hugo-docsy.” If someone else makes a change to the official documentation, the statement will change to reflect this. You can bring your repository up to date by clicking “Fetch upstream”.  Next, create your workflow:\n Clone your forked version of our documentation to a location of your choice on your computer. In this new folder, navigate to “neurodesk.github.io/content/en/tutorials” and then navigate to the subfolder you believe your workflow belongs in (e.g. “/functional_imaging”). Create a new, appropriately named markdown file to house your workflow. (e.g. “/physio.md”) Open this file in the editor of your choice (we recommend vscode) and populate it with your workflow! Please use this template as a style guide, it can be located at “neurodesk.github.io\\content\\en\\tutorials\\documentation\\workflowtemplate.md”. You’re also welcome to have a look at other the workflows already documented on our website for inspiration.  Finally, contribute your new workflow to the official documentation!:\n Once you are happy with your workflow, make sure you commit all your changes and push these local commits to github. Navigate to your forked version of the repository on github. Before you proceed, make sure you are up to date with our upstream documentation, you may need to fetch upstream changes. Now you can preview the changes before contributing them upstream. For this click on the “Actions” tab and enable the Actions (“I understand my workflows…\"). The first build will fail (due to a bug with the Github token), but the second build will work. Then you need to open the settings of the repository and check that Pages points to gh-pages and when clicking on the link the site should be there. To contribute your changes, click “Contribute”, and then “Open pull request”. Give your pull request a title (e.g. “Document PhysIO workflow”), leave a comment briefly describing what you have done, and then create the pull request. Someone from the Neurodesk team will review and accept your workflow and it will appear on our website soon!.  Thanks so much for taking the time to contribute your workflow to the Neurodesk community! If you have any feedback on the process, please let us know on github discussions.\nFormatting guidelines You can embelish your text in this tutorial using markdown conventions; text can be bold, italic, or strikethrough. You can also add Links, and you can organise your tutorial with headers, starting at level 2 (the page title is a level 1 header):\nLevel 2 heading You can also include progressively smaller subheadings:\nLevel 3 heading Some more detailed information.\nLevel 4 heading Even more detailed information.\nCode blocks You can add codeblocks to your tutorial as follows:\n# Some example code import numpy as np a = np.array([1, 2]) b = np.array([3, 4]) print(a+b) Or add syntax highlighting to your codeblocks:\n# Some example code import numpy as np a = np.array([1, 2]) b = np.array([3, 4]) print(a+b) Advanced code or command line formatting using this html snippet:\n\" data-output=\"6\" # Some example code import numpy as np a = np.array([1, 2]) b = np.array([3, 4]) print(a+b) [4 6]  You can also add code snippets, e.g. var foo = \"bar\";, which will be shown inline.\nImages To add screenshots to your tutorial, create a subfolder in neurodesk.github.io/static with the same link name as your tutorial. Add your screenshot to this folder, keeping in mind that you may want to adjust your screenshot to a reasonable size before uploading. You can then embed these images in your tutorial using the following convention:\nAlerts and warnings You can grab reader’s attention to particularly important information with quoteblocks, alerts and warnings:\n This is a quoteblock\n  This is an alert.  Note This is an alert with a title.  This is a warning.  Warning This is a warning with a title.  You can also segment information as follows:\n There’s a horizontal rule above and below this.\n Or add page information: This is a placeholder. Replace it with your own content.\n Tables You may want to order information in a table as follows:\n   Neuroscientist Notable work Lifetime     Santiago Ramón y Cajal Investigations on microscopic structure of the brain 1852–1934   Rita Levi-Montalcini Discovery of nerve growth factor (NGF) 1909–2012   Anne Treisman Feature integration theory of attention 1935–2018    Lists You may want to organise information in a list as follows:\nHere is an unordered list:\n Rstudio JASP SPSS  And an ordered list:\n Collect data Try to install analysis software Cry a little  And an unordered task list:\n Install Neurodesktop Analyse data Take a vacation  And a “mixed” task list:\n writing ? more writing probably  And a nested list:\n EEG file extensions  .eeg, .vhdr, .vmrk .edf .bdf .set, .fdt .smr   MEG file extensions  .ds .fif .sqd .raw .kdf    ","categories":"","description":"Follow this template to contribute your own workflow to the Neurodesk documentation.\n","excerpt":"Follow this template to contribute your own workflow to the Neurodesk …","ref":"/neurodesk.github.io/tutorials/documentation/workflowtemplate/","tags":["template","documentation"],"title":"Template for workflow creation"},{"body":"","categories":"","description":"How to edit the documentation\n","excerpt":"How to edit the documentation\n","ref":"/neurodesk.github.io/developers/documentation/","tags":"","title":"Documentation"},{"body":"","categories":"","description":"Tutorials about processing of EEG/MEG/ECoG data\n","excerpt":"Tutorials about processing of EEG/MEG/ECoG data\n","ref":"/neurodesk.github.io/tutorials/electrophysiology/","tags":"","title":"Electrophysiology"},{"body":"","categories":"","description":"Tutorials about processing functional MRI data\n","excerpt":"Tutorials about processing functional MRI data\n","ref":"/neurodesk.github.io/tutorials/functional_imaging/","tags":"","title":"Functional Imaging"},{"body":"Minimum System Requirements  At least 3GB free space for neurodesktop base image Docker requirements. Details found under https://docs.docker.com/get-docker/  Quickstart 1. Install Docker Install Docker from here: https://docs.docker.com/get-docker/\n2. Run Neurodesktop Create a local folder where the downloaded applications will be stored, e.g. ~/neurodesktop-storage\n Open a terminal, and type the folowing command to automatically download the neurodesktop container and run it  docker run --shm-size=1gb -it --privileged --name neurodesktop -v ~/neurodesktop-storage:/neurodesktop-storage -p 8080:8080 -h neurodesktop-20220111 vnmd/neurodesktop:20220111 There is a bug in docker 3.3.0 for Mac that makes this command not run correctly and there will be no application menu when you start the desktop. Update your docker version when you see this!  if you get errors in neurodesktop then check if the ~/neurodesktop-storage directory is writable to all users, otherwise run chmod a+rwx ~/neurodesktop-storage\nOnce neurodesktop is downloaded i.e. guacd[77]: INFO: Listening on host 127.0.0.1, port 4822 is displayed in terminal, open a browser and go to:  http://localhost:8080/#/?username=user\u0026password=password neurodesktop is ready to use!   User is user Password is password  Stopping neurodesktop: When done processing your data it is important to stop and remove the container - otherwise the next start or container update will give an error (\"… The container name “/neurodesktop” is already in use…\")\n  Click on the terminal from which you ran neurodesktop\n  Press control-C\n  Type:\n  docker stop neurodesktop Type:  docker rm neurodesktop Using an RDP Client Startup Neurodesktop using the following command:\ndocker run --shm-size=1gb -it --privileged --name neurodesktop -v ~/neurodesktop-storage:/neurodesktop-storage -p 3390:3389 -p 8080:8080 -h neurodesktop-20220111 vnmd/neurodesktop:20220111  If you want to connect via RDP using a different port, replace 3390 in the previous and next step with your port  Open your RDP client and connect to Computer localhost:3390\nUse the following details to login if prompted\nusername: user password: password Using VNC To enable VNC and disable RDP, startup Neurodesktop using the following command:\ndocker run --shm-size=1gb -it --privileged --name neurodesktop -v ~/neurodesktop-storage:/neurodesktop-storage -e VNC_ENABLE=true -p 8080:8080 -h neurodesktop-20220111 vnmd/neurodesktop:20220111  VNC allows for multiple desktop connections to same instance\nNote: Neurodesktop VNC on the browser currently does not support auto-resolution\n Using a VNC Client Needs testing  Startup Neurodesktop using the following command:\ndocker run --shm-size=1gb -it --privileged --name neurodesktop -v ~/neurodesktop-storage:/neurodesktop-storage -e VNC_ENABLE=true -p 5901:5901 -p 8080:8080 -h neurodesktop-20220111 vnmd/neurodesktop:20220111 Open a VNC Client and connect to port 5901\n","categories":"","description":"Install neurodesktop on MacOS\n","excerpt":"Install neurodesktop on MacOS\n","ref":"/neurodesk.github.io/docs/neurodesktop/getting-started/mac/","tags":"","title":"MacOS"},{"body":"","categories":"","description":"Tutorials about processing MRI phase\n","excerpt":"Tutorials about processing MRI phase\n","ref":"/neurodesk.github.io/tutorials/phase_processing/","tags":"","title":"MRI phase Processing"},{"body":"Layers Neurodesktop: https://github.com/NeuroDesk/neurodesktop\n docker container with interface modifications contains tools necessary to manage workflows in sub-containers: vscode, git CI: builds docker image and tests if it runs; tests if CVMFS servers are OK before deployment CD: pushes images to github \u0026 docker registry  Neurocommand: https://github.com/NeuroDesk/neurocommand\n script to install and manage multiple containers using transparent singularity on any linux system this repo also handles the creation of menu entries in a general form applicable to different desktop environments this repo can be re-used in other projects like CVL and when installing it on a bare-metal workstations CI: tests if containers can be installed CD: this repo checks if containers requested in apps.json file are availabe on object storage and if not converts the singularity containers based on the docker containers and uploads them to object storage  transparent-singularity: https://github.com/NeuroDesk/transparent-singularity\n script to install neuro-sub-containers, installers are called by neurocommand this repo provides a way of using our containers on HPCs for large scale processing of the pipelines (including the support of SLURM and other job schedulers) CI: test if exposing of binaries from container works  Neurocontainers: https://github.com/NeuroDesk/neurocontainers\n build scripts for neuro-sub-containers CI: building and testing of containers CD: pushing containers to github and dockerhub registry  Neurodocker: https://github.com/NeuroDesk/neurodocker\n fork of neurodocker project provides recipes for our containers built we are providing pull requests back of recipes CI: handled by neurodocker - testing of generating container recipes  ","categories":"","description":"The architecture of the Neurodesk ecosystem\n","excerpt":"The architecture of the Neurodesk ecosystem\n","ref":"/neurodesk.github.io/developers/architecture/neurodesk-compoents/","tags":"","title":"Neurodesk Architecture"},{"body":"","categories":"","description":"The plug-and-play, browser-accessible, containerised data analysis environment.\n","excerpt":"The plug-and-play, browser-accessible, containerised data analysis …","ref":"/neurodesk.github.io/docs/neurodesktop/","tags":"","title":"Neurodesktop"},{"body":"","categories":"","description":"Tutorials about performing reproducible analyses in general\n","excerpt":"Tutorials about performing reproducible analyses in general\n","ref":"/neurodesk.github.io/tutorials/reproducibility/","tags":"","title":"Reproducibility"},{"body":"","categories":"","description":"Tutorials about processing structural MRI data\n","excerpt":"Tutorials about processing structural MRI data\n","ref":"/neurodesk.github.io/tutorials/structural_imaging/","tags":"","title":"Structural Imaging"},{"body":"Now that you’ve installed and launched neurodesktop, you should see a virtual desktop environment in your browser, which might look something like this:\nIn this linux desktop environment, you can access the menu, launch programs, write analysis code, use version control software (i.e. git) and develop analysis pipelines as though you were on your own computer.\nRelease Keep a note of the release date of the container image that you installed. Regardless of what operating system you installed neurodesktop into, the release date would have been at the end of the docker run command:\nWe regularly update neurodesktop to make sure it’s running well and has up-to-date software. You can check the Release History page for details of previous releases. If you’d like to update your container at any time, simply switch out the release number for the version you would like. If you’ve finished working on an analysis pipeline and would like to share it with others, you can point them toward the stable release number that you worked in. That way anyone, on any computer around the world can replicate your analysis pipeline in the exact same computing environment that you developed it in.\nVideo tutorial Click here to watch a 2 minute tutorial video from OHBM 2021\nHow to access files from your Host computer There are various ways of connecting your data to to Neurodesktop. For more information see our Storage section: Storage\nHow to launch applications Click on the Launcher icon in bottom-left corner and navigate to the “Neurodesk” menu, then select the application and version you wish to launch. If it is the first time you launch the application, it will be downloaded to your desktop environment. The application is ready to use when the “Singularity\u003e” prompt appears in the terminal window that opens. If you chose in the menu the GUI of the application (e.g., fsleyesGUI 6.0.3), it will open automatically. If you chose that application itself (e.g., fsl 6.0.3), a terminal window will open, and you can use it to run any of the utilities packaged with the application, including the graphical utilities (e.g., typing “fsl” to run FSL’s main menu).\nHow to keep your modifications in the container We designed neurodesk with reproducibility as a main goal, so the desktop containers should not be modified if one aims for full reproducibility. However, there is one good option to keep your settings across different container versions: You can write a shell script that installs additional packages and modifies the environment so it’s perfect for you. This script can then be re-executed in a new desktop version and will enable a reprudcible customization.\nAnother option is to “save” your docker container including all changes you made. This could be useful when your changes are too difficult to write a shell script or when you do not care about reproducibilty as much and you just want to get the job done. To do this you can commit (https://docs.docker.com/engine/reference/commandline/commit/) your container and by uploading the container to your own docker hub you could even share it.\nHow to force a complete container download to your system To increase speed and reliability of Neurodesktop we mount the application containers from a CVMFS mount and download only the files required to run your current task. Although we aim to keep everything on there reproducible, there might be a reason that you want to fully download the containers to your system. You can force this behaviour by adding another parameter to the docker call: -e CVMFS_DISABLE=true\nFor windows an example would look like this:\ndocker run --shm-size=1gb -it --privileged --name neurodesktop -v C:/neurodesktop-storage:/neurodesktop-storage -e CVMFS_DISABLE=true -p 8080:8080 -h neurodesktop-20220111 vnmd/neurodesktop:20220111 ","categories":"","description":"Congratulations! You've installed Neurodesktop. What happens next?","excerpt":"Congratulations! You've installed Neurodesktop. What happens next?","ref":"/neurodesk.github.io/docs/neurodesktop/whats-next/","tags":"","title":"What's next?"},{"body":"WSL (w/ Ubuntu + LXDE) For more information on WSL: https://docs.microsoft.com/en-us/windows/wsl\nSetting up  Setup WSL2 using the following instructions (Ubuntu 18.04 recommended)\nhttps://docs.microsoft.com/en-us/windows/wsl/install-win10 Proceed until a Ubuntu bash shell is available from the Windows Host\nRun the remaining commands in the Bash shell sudo apt-get install lxde to install LXDE desktop in WSL Reboot sudo apt-get install xrdp to install XRDP in WSL Open /etc/xrdp/xrdp.ini Change port=3389 to port=3390 and save Run echo startlxde \u003e ~/.xsession  Running  sudo service xrdp start to start xrdp server Open Microsoft Remote Desktop Connection in Windows host Connect to localhost:3390 In the next login page, leave Session as Xorg. Enter your WSL username and password and click OK This should open an LXDE Linux Desktop environment. Follow Linux guide from here on  ","categories":"","description":"Install neurocommand on Windows\n","excerpt":"Install neurocommand on Windows\n","ref":"/neurodesk.github.io/docs/neurocommand/getting-started/windows/","tags":"","title":"Windows"},{"body":"","categories":"","description":"How to add new tools to neurodesk\n","excerpt":"How to add new tools to neurodesk\n","ref":"/neurodesk.github.io/developers/new_tools/","tags":"","title":"How to add new tools"},{"body":"Neurocommand requires a Linux host machine, virtual machine or WSL for Windows.\n","categories":"","description":"For more advanced users who prefer a command-line interface\n","excerpt":"For more advanced users who prefer a command-line interface\n","ref":"/neurodesk.github.io/docs/neurocommand/","tags":"","title":"Neurocommand"},{"body":" Warning For development and testing only. Not recommended for production use  Building neurodesktop-dev Dev builds can be triggered by Neurodesk admins from https://github.com/NeuroDesk/neurodesktop/actions/workflows/build-neurodesktop-dev.yml\nRunning latest neurodesktop-dev Linux docker pull vnmd/neurodesktop-dev:latest sudo docker run \\ --shm-size=1gb -it --cap-add SYS_ADMIN \\ --security-opt apparmor:unconfined --device=/dev/fuse \\ --name neurodesktop-dev \\ -v ~/neurodesktop-storage:/neurodesktop-storage \\ -e HOST_UID=\"$(id -u)\" -e HOST_GID=\"$(id -g)\" \\ -p 8080:8080 -h neurodesktop-dev \\ vnmd/neurodesktop-dev:latest  Windows \" docker pull vnmd/neurodesktop-dev:latest docker run --shm-size=1gb -it --cap-add SYS_ADMIN --security-opt apparmor:unconfined --device=/dev/fuse --name neurodesktop -v C:/neurodesktop-storage:/neurodesktop-storage -p 8080:8080 -h neurodesktop-dev vnmd/neurodesktop-dev:latest  ","categories":"","description":"Testing the latest dev version of Neurodesktop\n","excerpt":"Testing the latest dev version of Neurodesktop\n","ref":"/neurodesk.github.io/developers/architecture/neurodesk-dev/","tags":"","title":"Neurodesktop Dev"},{"body":"Transparent singularity is here https://github.com/NeuroDesk/transparent-singularity/\nThis project allows to use singularity containers transparently on HPCs, so that an application inside the container can be used without adjusting any scripts or pipelines (e.g. nipype).\nImportant: add bind points to .bashrc before executing this script This script expects that you have adjusted the Singularity Bindpoints in your .bashrc, e.g.:\nexport SINGULARITY_BINDPATH=\"/gpfs1/,/QRISdata,/data\" This gives you a list of all tested images available in neurodesk: https://github.com/NeuroDesk/neurodesk/blob/master/cvmfs/log.txt\ncurl -s https://raw.githubusercontent.com/NeuroDesk/neurodesk/master/cvmfs/log.txt Clone repo into a folder with the intented image name git clone https://github.com/NeuroDesk/transparent-singularity convert3d_1.0.0_20210104 Install This will create scripts for every binary in the container located in the $DEPLOY_PATH inside the container. It will also create activate and deactivate scripts and module files for lmod (https://lmod.readthedocs.io/en/latest/)\ncd convert3d_1.0.0_20210104 ./run_transparent_singularity.sh convert3d_1.0.0_20210104 Options for Transparent singularity:  --storage - this option can be used to force a download from docker, e.g.: --storage docker --container - this option can be used to explicitly define the container name to be downloaded --unpack - this will unpack the singularity container so it can be used on systems that do not allow to open simg / sif files for security reasons, e.g.: --unpack true --singularity-opts - this will be passed on to the singularity call, e.g.: --singularity-opts '--bind /cvmfs'  Use in module system LMOD Add the module folder path to $MODULEPATH\nManual activation and deactivation (in case module system is not available). This will add the paths to the .bashrc Activate source activate_convert3d_1.0.0_20210104.sh Deactivate source deactivate_convert3d_1.0.0_20210104.sif.sh Uninstall container and cleanup ./ts_uninstall.sh ","categories":"","description":"For more advanced users who wish to use Transparent Singularity directly\n","excerpt":"For more advanced users who wish to use Transparent Singularity …","ref":"/neurodesk.github.io/developers/transparent_singularity/","tags":"","title":"Transparent Singularity"},{"body":"Neurodesktop comes with the essential software required for neuroimaging data analysis pre-installed. Each release is built with the most recent version of these packages available at the build date. Some example packages include:\n Editors and Programming:  Visual Studio Code Emacs Gedit Vim Python Git   Workflow systems:  Nipype (including GraphVis)   Data Syncronisation tools: (See our Storage section for more information: Storage)  Rsync Rclone https://rclone.org/ Nextcloud client Owncloud client Globus personal connect https://docs.globus.org/how-to/globus-connect-personal-linux/  installed in /opt/globusconnectpersonal/     System Management:  Lmod (inlcuding Lua) Singularity Htop   Misc  Imagemagic Firefox OpenSSH client    The neurodesktop environment is built to be light and fast to download and start-up. Most additional programs are therefore downloaded when they are first used. A list of these packages can be found here\n","categories":"","description":"The software available in neurodesktop","excerpt":"The software available in neurodesktop","ref":"/neurodesk.github.io/docs/neurodesktop/whatsinthebox/","tags":"","title":"What's in the box?"},{"body":"Minimum System Requirements  At least 3GB free space for neurodesktop base image Docker requirements. Details found under https://docs.docker.com/get-docker/ If installing docker using WSL, atleast 20GB space recommended for WSL with Ubuntu  Quickstart 1. Install Docker Install Docker from here: https://docs.docker.com/get-docker/ The docker installation will reboot your computer a few times and there might be warnings regardings WSL2 and this also might require a few more installation steps that unfortunatley differ for every system. Please get in touch if you are stuck and have a look at our troubleshoot page.  2. Run Neurodesktop Use one of the following options to run Neurodesktop:\nOption 1: NeuroDesktop.exe Download and run the following executable https://github.com/NeuroDesk/neurodesktop/raw/main/Windows_run_Neurodesk/NeuroDesktop.exe\nOption 2: Using Terminal  Open a terminal (e.g. Powershell), and type the folowing command to automatically download the neurodesktop container and run it  \" docker run --shm-size=1gb -it --privileged --name neurodesktop -v C:/neurodesktop-storage:/neurodesktop-storage -p 8080:8080 -h neurodesktop-20220111 vnmd/neurodesktop:20220111  Once neurodesktop is downloaded i.e. guacd[77]: INFO: Listening on host 127.0.0.1, port 4822 is displayed in terminal, open a browser and go to:  http://localhost:8080/#/?username=user\u0026password=password  Note We do not recommend the use of the Firefox browser for accessing Neurodesktop, as this may lead to performance issues.  neurodesktop is ready to use!   User is user Password is password  Stopping neurodesktop: When done processing your data it is important to stop and remove the container - otherwise the next start or container update will give an error (\"… The container name “/neurodesktop” is already in use…\")\n  Click on the terminal from which you ran neurodesktop\n  Press control-C\n  Type:\n  docker stop neurodesktop Type:  docker rm neurodesktop Using an RDP Client Startup Neurodesktop using the following command:\n\" docker run --shm-size=1gb -it --privileged --name neurodesktop -v C:/neurodesktop-storage:/neurodesktop-storage -p 3390:3389 -p 8080:8080 -h neurodesktop-20220111 vnmd/neurodesktop:20220111  If you want to connect via RDP using a different port, replace 3390 in the previous and next step with your port  Open Windows Remote Desktop Connection and connect to Computer localhost:3390 as shown below.\nResolution and multi-monitor settings can be set from the Display tab.\nOnce ready, click Connect. This will take you to the following prompt\nUse the following details to login\nSession: Xorg username: user password: password Using VNC To enable VNC and disable RDP, startup Neurodesktop using the following command:\n\" docker run --shm-size=1gb -it --privileged --name neurodesktop -v C:/neurodesktop-storage:/neurodesktop-storage -e VNC_ENABLE=true -p 8080:8080 -h neurodesktop-20220111 vnmd/neurodesktop:20220111  VNC allows for multiple desktop connections to same instance\nNote: Neurodesktop VNC on the browser currently does not support auto-resolution\n Using a VNC Client Needs testing  Startup Neurodesktop using the following command:\n\" docker run --shm-size=1gb -it --privileged --name neurodesktop -v C:/neurodesktop-storage:/neurodesktop-storage -e VNC_ENABLE=true -p 5901:5901 -p 8080:8080 -h neurodesktop-20220111 vnmd/neurodesktop:20220111  Open a VNC Client and connect to port 5901\n","categories":"","description":"Install neurodesktop on Windows\n","excerpt":"Install neurodesktop on Windows\n","ref":"/neurodesk.github.io/docs/neurodesktop/getting-started/windows/","tags":"","title":"Windows"},{"body":"","categories":"","description":"How to interact with our CVMFS service.\n","excerpt":"How to interact with our CVMFS service.\n","ref":"/neurodesk.github.io/developers/cvmfs/","tags":"","title":"Neurodesk CVMFS"},{"body":"Install CVMFS First you need to install CVMFS. Follow the official instructions here: https://cvmfs.readthedocs.io/en/stable/cpt-quickstart.html#getting-the-software\none example for Windows Subsystem for Linux (WSL) could look like this:\n1 2 3 4 5 6  sudo apt-get install lsb-release wget https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest_all.deb sudo dpkg -i cvmfs-release-latest_all.deb rm -f cvmfs-release-latest_all.deb sudo apt-get update sudo apt-get install cvmfs   Configure CVMFS Once installed create the keys and configure the servers used:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  sudo mkdir -p /etc/cvmfs/keys/ardc.edu.au/ echo \"-----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwUPEmxDp217SAtZxaBep Bi2TQcLoh5AJ//HSIz68ypjOGFjwExGlHb95Frhu1SpcH5OASbV+jJ60oEBLi3sD qA6rGYt9kVi90lWvEjQnhBkPb0uWcp1gNqQAUocybCzHvoiG3fUzAe259CrK09qR pX8sZhgK3eHlfx4ycyMiIQeg66AHlgVCJ2fKa6fl1vnh6adJEPULmn6vZnevvUke I6U1VcYTKm5dPMrOlY/fGimKlyWvivzVv1laa5TAR2Dt4CfdQncOz+rkXmWjLjkD 87WMiTgtKybsmMLb2yCGSgLSArlSWhbMA0MaZSzAwE9PJKCCMvTANo5644zc8jBe NQIDAQAB -----END PUBLIC KEY-----\" | sudo tee /etc/cvmfs/keys/ardc.edu.au/neurodesk.ardc.edu.au.pub echo \"CVMFS_USE_GEOAPI=yes\" | sudo tee /etc/cvmfs/config.d/neurodesk.ardc.edu.au.conf echo 'CVMFS_SERVER_URL=\"http://203.101.231.144/cvmfs/@fqrn@;http://150.136.239.221/cvmfs/@fqrn@;http://132.145.96.34/cvmfs/@fqrn@;http://140.238.170.185/cvmfs/@fqrn@;http://130.61.74.69/cvmfs/@fqrn@;http://152.67.114.42/cvmfs/@fqrn@\"' | sudo tee -a /etc/cvmfs/config.d/neurodesk.ardc.edu.au.conf echo 'CVMFS_KEYS_DIR=\"/etc/cvmfs/keys/ardc.edu.au/\"' | sudo tee -a /etc/cvmfs/config.d/neurodesk.ardc.edu.au.conf echo \"CVMFS_HTTP_PROXY=DIRECT\" | sudo tee /etc/cvmfs/default.local echo \"CVMFS_QUOTA_LIMIT=5000\" | sudo tee -a /etc/cvmfs/default.local sudo cvmfs_config setup # this is only necessary for WSL: sudo cvmfs_config wsl2_start sudo cvmfs_config chksetup ls /cvmfs/neurodesk.ardc.edu.au sudo cvmfs_talk -i neurodesk.ardc.edu.au host probe sudo cvmfs_talk -i neurodesk.ardc.edu.au host info cvmfs_config stat -v neurodesk.ardc.edu.au   use of Neurodesk CVMFS containers The containers are now available in /cvmfs/neurodesk.ardc.edu.au/containers/ and can be started with:\nsingularity shell /cvmfs/neurodesk.ardc.edu.au/containers/itksnap_3.8.0_20201208/itksnap_3.8.0_20201208.simg make sure that SINGULARITY_BINDPATH include the directories you want to work with:\nexport SINGULARITY_BINDPATH='/cvmfs,/mnt,/home' WSL doesn’t support homedirectory - so don’t mount this singularity shell --no-home /cvmfs/neurodesk.ardc.edu.au/containers/itksnap_3.8.0_20201208/itksnap_3.8.0_20201208.simg or configure permanently:\nsudo vi /etc/singularity/singularity.conf set\nmount home = no use of containers in the module system: export SINGULARITY_BINDPATH='/cvmfs,/mnt,/home' module use /cvmfs/neurodesk.ardc.edu.au/neurodesk-modules/* ml fsl fslmaths ","categories":"","description":"Neurodesk Singularity Containers on CVMFS\n","excerpt":"Neurodesk Singularity Containers on CVMFS\n","ref":"/neurodesk.github.io/docs/neurocontainers/cvmfs/","tags":"","title":"CVMFS"},{"body":"Our containers are automatically built in https://github.com/NeuroDesk/neurocontainers/ and hosted on dockerhub or on github\nPull Docker containers e.g. for a julia container docker\ndocker pull vnmd/julia_1.6.1 build singularity image from dockerhub\nsingularity build julia_1.6.1.simg docker://vnmd/julia_1.6.1 Replace julia_1.6.1 with your selected application\n","categories":"","description":"Neurodesk Docker containers\n","excerpt":"Neurodesk Docker containers\n","ref":"/neurodesk.github.io/docs/neurocontainers/docker/","tags":"","title":"Docker"},{"body":"","categories":"","description":"Tutorials on contributing to the Neurodesk Documentation\n","excerpt":"Tutorials on contributing to the Neurodesk Documentation\n","ref":"/neurodesk.github.io/tutorials/documentation/","tags":"","title":"Documentation"},{"body":"One way of running this project on HPCs is via https://neurodesk.github.io/docs/neurocommand/getting-started/linux/\n","categories":"","description":"Run neurodesktop in a high performance computing environment\n","excerpt":"Run neurodesktop in a high performance computing environment\n","ref":"/neurodesk.github.io/docs/neurodesktop/getting-started/hpc/","tags":"","title":"HPC"},{"body":"","categories":"","description":"What neurocontainers are about\n","excerpt":"What neurocontainers are about\n","ref":"/neurodesk.github.io/docs/neurocontainers/","tags":"","title":"Neurocontainers"},{"body":"Our docker containers are converted to singularity containers and stored on Object storage.\nDownload Singularity Containers First get an overview which containers are available as Singularity containers: https://github.com/NeuroDesk/neurodesk/blob/master/cvmfs/log.txt\ncurl -s https://raw.githubusercontent.com/NeuroDesk/neurodesk/master/cvmfs/log.txt assign the container name to a variable:\nexport container=itksnap_3.8.0_20201208 Then download the containers. An easy way is to use CURL (e.g. downloading from the US location):\ncurl -X GET https://objectstorage.us-ashburn-1.oraclecloud.com/n/sd63xuke79z3/b/neurodesk/o/${container}.simg -O or from australia\ncurl -X GET https://objectstorage.ap-sydney-1.oraclecloud.com/n/sd63xuke79z3/b/neurodesk/o/${container}.simg -O A faster way is pulling from multiple storage locations at once using aria2:\naria2c https://objectstorage.us-ashburn-1.oraclecloud.com/n/sd63xuke79z3/b/neurodesk/o/${container}.simg https://objectstorage.eu-frankfurt-1.oraclecloud.com/n/sd63xuke79z3/b/neurodesk/o/${container}.simg https://objectstorage.ap-sydney-1.oraclecloud.com/n/sd63xuke79z3/b/neurodesk/o/${container}.simg https://swift.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/neurodesk/${container}.simg Transparent Singularity The singularity containers can be also be used in combination with our Transparent Singularity Tool tool, that wraps the executables inside a container to make them easily available for pipelines. More information can be found here:\none example to do this is:\ncurl -s https://raw.githubusercontent.com/NeuroDesk/neurodesk/master/cvmfs/log.txt export container=itksnap_3.8.0_20201208 git clone https://github.com/NeuroDesk/transparent-singularity ${container} cd ${container} ./run_transparent_singularity.sh ${container} ","categories":"","description":"Neurodesk Singularity Containers\n","excerpt":"Neurodesk Singularity Containers\n","ref":"/neurodesk.github.io/docs/neurocontainers/singularity/","tags":"","title":"Singularity"},{"body":"Cloud-storage The easiest way to get your data into Neurodesktop is to use a cloud storage provider like CloudStor, Dropbox, OneDrive and their sync tools like OwnCloud, Nextcloud or very flexible tools like rclone or davfs2. Another good option could be to utilize Globus for large amounts of data.\nNextcloud and Owncloud desktop clients Under the menu item “Accessories” you can find “Nextcloud” and “ownCloud” desktop sync clients that you can configure with your cloud service accounts.\nTo connect for example to your AARNET cloudstor account you can start the ownCloud client and enter the Server Address:\nhttps://cloudstor.aarnet.edu.au/plus/ Then generate an app-password here: https://cloudstor.aarnet.edu.au/plus/settings/personal?sectionid=security\nMounting webdav storage using davfs2 Another option is to directly mount webdav storage. Here is an example how to mount CloudStor into Neurodesktop:\nsudo mount -t davfs https://cloudstor.aarnet.edu.au/plus/remote.php/webdav/ /data/ It then asks you for a username and password, which you can generate here: https://cloudstor.aarnet.edu.au/plus/settings/personal?sectionid=security\nRclone Rclone is a command line tool that enables the interaction with various cloud services. Here is an example how to setup rclone with CloudStor Aarnet:\n start the configuration in a terminal window rclone config Create a new remote: n Provide a name for the remote: CloudStor For the “Storage” option choose: webdav As “url” set: https://cloudstor.aarnet.edu.au/plus/remote.php/webdav/ As “vendor” set OwnCloud: 2 Set your CloudStor username after generating an access token https://cloudstor.aarnet.edu.au/plus/settings/personal?sectionid=security Choose to type in your own password: y Enter the Password / Token from the CloudStor App passwords page and confirm it again: Leave blank the bearer_token: \u003chit Enter\u003e No advanced config necessary: \u003chit Enter\u003e accept the configuration: \u003chit Enter\u003e Quit the config: q Now we can download data to the HPC easily: rclone copy --progress --transfers 8 CloudStor:/raw-data-for-science-paper . or upload data to CloudStor: rclone copy --progress --transfers 8 . CloudStor:/data-processed  Globus We also provide the globus client, so you can transfer large amounts of data between globus endpoints and Neurodesktop. You can configure it by running:\n/opt/globusconnectpersonal/globusconnectpersonal-*/globusconnectpersonal Once authenticated you can go to the globus file-manager https://app.globus.org/file-manager and your neurodesktop instance will be an endpoint for globus.\nMounting external storage on your host-computer The -v C:/neurodesktop-storage:/neurodesktop-storage part of the docker command links the directory “neurodesktop-storage” on the “C drive” of your Windows computer to the directory /neurodesktop-storage inside the Desktop environment. Everything you store in there will be available inside the desktop and on the host computer. You can also mount additional directories by adding another -v parameter set (e.g. -v D:/moredata:/data) - this will mount the directory moredata from your D drive to /data inside neurodesktop. Improtant: the mountpoint inside neurodesktop should be named /data (or anything from this list: https://github.com/NeuroDesk/neurocontainers/blob/master/recipes/globalMountPointList.txt) - otherwise most of the tools will not be able to access the data.\nHere is an example for Windows adding another storage directory:\n\" docker run --shm-size=1gb -it --privileged --name neurodesktop -v C:/neurodesktop-storage:/neurodesktop-storage -v D:/moredata:/data -p 8080:8080 -h neurodesktop-20220111 vnmd/neurodesktop:20220111  Mount volume using SSHFS It is theoretically possible to mount an SSH target inside Neurodesktop, but it’s not a very reliable way of mounting storage:\nsshfs -o allow_root USER@TARGET_HOST:TARGET_PATH SOURCE_PATH A better option is to use scp and copy data from an SSH endpoint:\nscp /neurodesk/myfile user@remoteserver:/data/ ","categories":"","description":"Add storage to Neurodesktop\n","excerpt":"Add storage to Neurodesktop\n","ref":"/neurodesk.github.io/docs/neurodesktop/storage/","tags":"","title":"Storage"},{"body":"Following guide is for connecting to a Neurodesktop using a VS Code installation running on your host machine.\n Additional instructions if your Neurodesktop is running remotely (i.e. Cloud, HPC, VM)\n Pre-requisites Visual Studio Code (https://code.visualstudio.com) installed on your host. Standalone version should work fine\nInstall the following VS Code extensions:\n Docker extension (Required) Remote development extension pack. Includes the following extensions  Remote - Containers (Required) Remote - SSH (For remote servers) Remote - WSL (For windows hosts)    For Remote servers Open VS Code\nOpen the Command Palette (Ctrl+Shift+P)\nFind Remote-SSH: Connect to Host... and select your remote host\n More information on remote hosts available at https://code.visualstudio.com/docs/remote/ssh\n This will open a new VS Code instance connected to the remote host via SSH. You may close the previous VS Code instance.\nFollow the steps in the next section using the new VS Code instance\nConnecting to Neurodesktop Open VS Code and open a Folder (File \u003e Open Folder)\n This can be any folder (e.g. home or project folder). VS Code runs into errors if no folder is opened.\n Open the Command Palette (Ctrl+Shift+P).\nSelect Remote-Containers: Attach to Running Container from the dropdown panel\nStart typing in ‘neurodesktop. Select /neurodesktop from the list\nThis should open a VS Code Window connected to the neurodesktop as a Dev Container.\n First time connection will take about a minute, as VS code has to install the VS Code server onto the container. Repeat connections should be faster\n First time connection  First time connection will default to using neurodesktop root user. We want to default connection to be as the normal user to avoid permission issues. To check which user is being use, open the terminal in the neurodesktop VS Code and check if the user is user or root\n Follow the following steps to configure your VS Code to connect to neurodesktop as normal user by default\nOpen the Command Palette (Ctrl+Shift+P).\nSelect Remote-Containers: Open Container Configuration File from the dropdown panel\nThis will open a neurodesktop%3alatest.json file. Overwrite the file with the following contents\n{ \"workspaceFolder\": \"/home/user\", \"remoteUser\": \"user\" }  Close this VS Code window. Use steps in previous section to connect normally\n","categories":"","description":"Guide connecting your VS Code environment to Neurodesktop","excerpt":"Guide connecting your VS Code environment to Neurodesktop","ref":"/neurodesk.github.io/docs/neurodesktop/getting-started/visual-studio-code/","tags":"","title":"Visual Studio Code"},{"body":"Minimum System Requirements  At least 3GB free space for neurodesktop base image Docker requirements. Details found under https://docs.docker.com/get-docker/  Quickstart 1. Connect to cloud server On the computer from which you want to access Neurodesktop, open an SSH connection to your cloud instance with port forwarding (USER should be substituted with a username that has admin privileges on the cloud instance, and IP should be substituted with the IP address of the cloud instance)\nssh -L 8080:127.0.0.1:8080 USER@IP 2. Install Docker Install Docker on the cloud instance from here: https://docs.docker.com/get-docker/. Additional information available here: https://neurodesk.github.io/docs/neurodesktop/getting-started/linux/#installing-docker\n3. Run Neurodesktop Create a local folder ~/neurodesktop-storage on the cloud instance to store persistent data (data that will not disappear if neurodesktop is stopped)\nOption 1: NeuroDesktop.run Download and run the following executable on the cloud instance https://github.com/NeuroDesk/neurodesktop/raw/main/Linux_run_Neurodesk/NeuroDesktop.run\nOption 2: Using Terminal  Type the folowing command on the cloud instance to automatically download the neurodesktop container and run it  sudo docker run \\ --shm-size=1gb -it --privileged --name neurodesktop \\ -v ~/neurodesktop-storage:/neurodesktop-storage \\ -e HOST_UID=\"$(id -u)\" -e HOST_GID=\"$(id -g)\" \\ -p 8080:8080 -h neurodesktop-20220111 \\ vnmd/neurodesktop:20220111  If you get errors in neurodesktop then check if the ~/neurodesktop-storage directory is writable to all users, otherwise run chmod a+rwx ~/neurodesktop-storage   Once neurodesktop is downloaded to the cloud instance (guacd[77]: INFO: Listening on host 127.0.0.1, port 4822 is displayed in terminal), leave the terminal open and neurodesktop running (i.e., do not press CTRL+C)\n  Open a browser on the computer from which you want to access Neurodesktop, and go to:\n  http://localhost:8080/#/?username=user\u0026password=password If the computer runs Linux, check specific instructions at https://neurodesk.github.io/docs/neurodesktop/getting-started/linux/, Option 2, Step 3.\nneurodesktop is ready to use!   User is user Password is password  if your computer hibernated/rebooted/etc., if the network connnection has been temprarily lost, or if you want to connect to the same instance of Neurodesktop from another computer, only repeat steps 1 and 6, and you will be reconnected to neurodesktop  Stopping neurodesktop: When done processing your data it is important to stop and remove the container - otherwise the next start or container update will give an error (\"… The container name “/neurodesktop” is already in use…\")\n  Click on the terminal from which you ran neurodesktop\n  Press Ctrl-C\n  Run:\n  sudo docker stop neurodesktop \u0026\u0026 sudo docker rm neurodesktop  Portforwarding to an iOS ipad You can also connect to this cloud instance from your iOS device :) For this install https://webssh.net/documentation/help/networking/port-forwarding/ and create a tunnel (the tool is free for one connection). Start the docker container in a screen session and then connect to it from your ios device in the browser.\nCloud-provider specific Tutorials    Cloud provider link     Oracle https://mri.sbollmann.net/index.php/2020/12/08/run-neurodesk-on-oracle-cloud-free-tier/   Azure https://henryjburg.medium.com/neurodesk-running-on-azure-3e38c590a152    Using an RDP Client Open an SSH connection to your cloud instance with the following command\nssh -L 3390:127.0.0.1:3390 USER@IP Startup Neurodesktop using the following command:\nsudo docker run \\ --shm-size=1gb -it --privileged --name neurodesktop \\ -v ~/neurodesktop-storage:/neurodesktop-storage \\ -e HOST_UID=\"$(id -u)\" -e HOST_GID=\"$(id -g)\" \\ -p 3390:3389 -p 8080:8080 -h neurodesktop-20220111 \\ vnmd/neurodesktop:20220111  If you want to connect via RDP using a different port, replace 3390 in the previous two steps and next step with your port  Open your RDP client and connect to Computer localhost:3390\nUse the following details to login if prompted\nusername: user password: password Using VNC To enable VNC and disable RDP, startup Neurodesktop using the following command:\nsudo docker run \\ --shm-size=1gb -it --privileged --name neurodesktop \\ -v ~/neurodesktop-storage:/neurodesktop-storage \\ -e VNC_ENABLE=true -e HOST_UID=\"$(id -u)\" -e HOST_GID=\"$(id -g)\" \\ -p 8080:8080 -h neurodesktop-20220111 \\ vnmd/neurodesktop:20220111  VNC allows for multiple desktop connections to same instance\nNote: Neurodesktop VNC on the browser currently does not support auto-resolution\n Using a VNC Client Needs testing  Startup Neurodesktop using the following command:\nsudo docker run \\ --shm-size=1gb -it --privileged --name neurodesktop \\ -v ~/neurodesktop-storage:/neurodesktop-storage \\ -e VNC_ENABLE=true -e HOST_UID=\"$(id -u)\" -e HOST_GID=\"$(id -g)\" \\ -p 5901:5901 -p 8080:8080 -h neurodesktop-20220111 \\ vnmd/neurodesktop:20220111  Open a VNC Client and connect to port 5901\n","categories":"","description":"Run neurodesktop using Oracle or Azure cloud computing\n","excerpt":"Run neurodesktop using Oracle or Azure cloud computing\n","ref":"/neurodesk.github.io/docs/neurodesktop/getting-started/cloud/","tags":"","title":"Cloud"},{"body":"Neurodesk is an open-source project that is always evolving. If you are experiencing an issue not listed here, please open a new issue, so that we can aim to solve it and update our help documentation.\nTo ask questions or suggest new features, join the discussion on github.\ndocker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?. This is usually a docker-related error, not related to neurodesktop itself. To troubleshoot docker, we can try a simpler container first:\ndocker run hello-world Try the following solutions (in this order, until the above command works)\n Win/Mac: Open docker GUI and accept T\u0026Cs. Check that the docker engine is running Close and open the terminal and retry. Log out and login again, or restart the machine (current user environment doesnt fully know docker is running) Add your user to the OS docker group (current user doesnt have permission to run docker) docker.sock permissions need to be changed (raise a github issue here)  Windows users: WSL not installed properly The Docker engine relies on the Windows subsystem for Linux (WSL) to run on a windows machine.\nNote We recommend the manual install instructions, as the simplified install requires an upgrade to a preview build of Windows that may be unstable.  If WSL is properly installed, the Resources tab of the Docker settings should look something like this:\nHowever, if WSL is missing or incorrectly configured, the Resources tab of the Docker settings may look something like this:\nIf this is the case, follow the manual install instructions to install WSL 2 (including installation of Ubuntu through Microsoft Store).\nWindows users: Not enough free space on the partition in Windows and WSL2 This could help: https://yjmantilla.github.io/tutorials/wsl2-move-vhdx.html\nWindows users: Failure to connect to Neurodesktop in Firefox We recommend using Microsoft Edge or Google Chrome to access Neurodesktop.\nTrouble installing neurodesk images This may be a memory issue. First, ensure that there is enough free space on the disk. If there is, try resetting docker settings and data. To do this:\n Open the docker engine Navigate to “Troubleshooting” (the bug icon in the top right). Click “Reset to factory defaults”  If you are still experiencing issues after this, you may need to update docker to the latest version. This can be achieved through “settings” in the docker engine, or (on windows) by right clicking on the docker tray icon:\n","categories":"","description":"Are you experiencing issues with neurodesktop?","excerpt":"Are you experiencing issues with neurodesktop?","ref":"/neurodesk.github.io/docs/neurodesktop/troubleshooting/","tags":"","title":"Troubleshooting"},{"body":"","categories":"","description":"List of Applications\n","excerpt":"List of Applications\n","ref":"/neurodesk.github.io/applications/","tags":"","title":"Applications"},{"body":"","categories":"","description":"Documentation for Developers\n","excerpt":"Documentation for Developers\n","ref":"/neurodesk.github.io/developers/","tags":"","title":"Developers"},{"body":"20220111  a deep learning based vessel segmentation algorithm “vesselapp” was added in version 0.3.1 palm - Permutation Analysis of Linear Models - was added in version alpha119 niistat running in octave was added with version 1.0.20191216 MRIcroGL was updated to a version with included python support, so the scripting is now working rabies - Rodent Automated Bold Improvement of EPI Sequences was added with version 0.3.5 oshyx was updated to 0.3  20211220  neurodesktop can now be accessed via native RDP client as well (e.g. for multi-monitor support): https://neurodesk.github.io/docs/neurodesktop/getting-started/windows/#using-an-rdp-client there is a new Help button in the menu :) updates of ants 2.3.4 (now includes Scripts as well, including antsCookTemplatePriors.sh) + newly added version 2.3.5 new version of QSMxT 1.1.9 20211219 new version of Spinal Cord Toolbox 5.4 new tools: MRIcroGL and surfice - fantastic viewers for neuroimaging data  20211207  Physio toolbox compiled and added to SPM + update of SPM added brainstorm new neurodesktop container management scripts for Linux, Mac and Windows: https://github.com/NeuroDesk/neurodesktop added fieldtrip Datalad is now in the main image, so datalad run should work added Oshy-X segmentation tool updated freesurfer 7.2.0  20211028  added EEGLAB  20211018  added Rstudio, R and multiple R packages (plotly, car, tidyverse, …) added ClearSWI and ROMEO for MRI phase processing (including new Tutorials: https://neurodesk.github.io/tutorials/phase_processing/) added more categories in applications menu (Body, Electrophysiology, Hippocampus, Phase Processing, Rodent Imaging, Shape Analysis, Spine, Statistics) bugfix: improved startup time of the desktop container (miniconda in homedirectory was causing chmod slowdown) bugfix: ssh, vnc and rdp servers are now restarted in case the container was stopped and started again (e.g. on Standby)  20210929  fixed naming of aidmri to aidamri and added new category “Rodent Imaging” updated all tool icons and updated neurodesk icon including background image VScode now stores settings in persistent storage /neurodesktop-storage and with this keeps extensions and settings across different neurodesktop versions docker layers are now cached, so updating the desktop to the next version is very fast and consumes less disk space locally default theme of terminal changed from Solarized to Tango as the old theme was hiding information in tools like htop (same font colour on same background…)  20210923  removed faulty mriqc 0.15.2 container neurodesk.github.io is now starting page in firefox browser  20210918  added mriqc 0.16.1 and mrtrix 3.0.3  20210917  included more tools for connecting to cloud storage services (rclone, owncloud, nextcloud, davfs2, globus). For more info: Storage styling of desktop interface, including background wallpaper and colour scheme in terminal window new categories in menu system (visualization) and added more categories to tools  20210916  This is the first version of the newly renamed and rebuild neurodesktop (previously vnm and neuromachine) containers are mounted by default from CVMFS, but this can be deactivated by adding -e CVMFS_DISABLE=true to the docker call  ","categories":"","description":"Previous releases of neurodesktop","excerpt":"Previous releases of neurodesktop","ref":"/neurodesk.github.io/docs/neurodesktop/release-history/","tags":"","title":"Release History"},{"body":"","categories":"","description":"Tutorials\n","excerpt":"Tutorials\n","ref":"/neurodesk.github.io/tutorials/","tags":"","title":"Tutorials"},{"body":" We are working on a demo that directly runs in your browser without the need to install anything. But it’s not quite ready yet …\n ","categories":"","description":"Run a demo of neurodesktop _without_ installing Docker\n","excerpt":"Run a demo of neurodesktop _without_ installing Docker\n","ref":"/neurodesk.github.io/docs/neurodesktop/getting-started/demo/","tags":"","title":"Demo"},{"body":"  Get started with Neurodesk A flexible, scalable, and browser-based data analysis environment for reproducible neuroimaging\n Linux   Windows   Mac   HPC   Cloud   Demo        Neurodesktop  Fully featured desktop in a container\nRead more …\n   Neurocommand  Core installer\nRead more …\n   Neurocontainers  Software container library\nRead more …\n   Discussions  Ask questions, suggest new features or raise any issues you have (Github account required)\nRead more …\n    ","categories":"","description":"","excerpt":"  Get started with Neurodesk A flexible, scalable, and browser-based …","ref":"/neurodesk.github.io/","tags":"","title":"Neurodesk"},{"body":"","categories":"","description":"","excerpt":"","ref":"/neurodesk.github.io/search/","tags":"","title":"Search Results"}]