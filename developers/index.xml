<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NeuroDesk – Developers</title><link>https://kel-github/neurodesk.github.io/developers/</link><description>Recent content in Developers on NeuroDesk</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://kel-github/neurodesk.github.io/developers/index.xml" rel="self" type="application/rss+xml"/><item><title>Developers: Add tools</title><link>https://kel-github/neurodesk.github.io/developers/new_tools/add_tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kel-github/neurodesk.github.io/developers/new_tools/add_tool/</guid><description>
&lt;p>The goal of &lt;em>neurodesk&lt;/em> is to provide users with a large choice of tools to use in their pipelines.
Use the guide below to add a tool to &lt;em>neurodesktop&lt;/em> or &lt;em>neurocontainers&lt;/em>.&lt;/p>
&lt;h2 id="guiding-principles">Guiding principles&lt;/h2>
&lt;p>To decide if a tool should be packaged in a singularity container in &lt;em>neurocontainers&lt;/em> or be installed in the &lt;em>neurodesktop&lt;/em> container we are currently following these guiding principles:&lt;/p>
&lt;ol>
&lt;li>&lt;em>neurodesk&lt;/em> is not a package manager. This means we are not distributing tools in containers that can easily be installed via a standard package manager&lt;/li>
&lt;li>&lt;em>neurodesk&lt;/em> allows users to have multiple versions of tools in parallel via &lt;a href="https://lmod.readthedocs.io/en/latest/">lmod&lt;/a>, this means that if different versions of a tool can&amp;rsquo;t be installed in parallel we package the tool inside a container.&lt;/li>
&lt;li>&lt;em>neurodesk&lt;/em> aims to provide tooling to link tools from different containers (such as workflow managers like nipype or nextflow). This means that if a tool is required to coordinate various container-tools, it should be in the &lt;em>neurodesktop&lt;/em> container.&lt;/li>
&lt;/ol>
&lt;p>Examples:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>easy install&lt;/th>
&lt;th>coordinates containers&lt;/th>
&lt;th>small in size&lt;/th>
&lt;th>latest version is ok&lt;/th>
&lt;th>useful to most users&lt;/th>
&lt;th>Conclusion&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>git&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>neurodesktop&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lmod&lt;/td>
&lt;td>no&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>neurodesktop&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nipype&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>neurodesktop&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>vscode&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>neurodesktop&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>itksnap&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>no&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>container?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>convert3D&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>no&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fsl&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mrtrix&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>freesurfer&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>container&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="adding-new-recipes">Adding new recipes&lt;/h2>
&lt;p>Refer to &lt;a href="https://github.com/NeuroDesk/neurodocker">neurodocker&lt;/a> for more information on neurodocker recipes&lt;/p>
&lt;h2 id="build-container">Build container&lt;/h2>
&lt;p>To build a container, set up environment with:&lt;/p>
&lt;ol>
&lt;li>Docker, the version in our CI environment&lt;/li>
&lt;li>Python, the version in our CI environment&lt;/li>
&lt;/ol>
&lt;p>And then follow these steps:&lt;/p>
&lt;ol>
&lt;li>Sync/modify Neurodocker, the dependency we are using to build containers:
&lt;ol>
&lt;li>Press &amp;ldquo;Fetch upstream&amp;rdquo; in &lt;a href="https://github.com/NeuroDesk/neurodocker">https://github.com/NeuroDesk/neurodocker&lt;/a> to check if our fork of Neurodocker is already up-to-date&lt;/li>
&lt;li>If there are upstream commits that are not synced yet, open an issue in &lt;a href="https://github.com/NeuroDesk/neurocontainers/issues">https://github.com/NeuroDesk/neurocontainers/issues&lt;/a>, requesting one of Neurodesk admins to pull-in latest changes from Neurodocker upstream into our fork of Neurodocker&lt;/li>
&lt;li>If relevant to your project, add recipe to neurodocker (&lt;a href="https://github.com/NeuroDesk/neurodocker">https://github.com/NeuroDesk/neurodocker&lt;/a>) and create a pull request to neurodocker (add new tool in a branch!)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Clone the neurocontainers repository:
&lt;div class="alert alert-primary" role="alert">
&lt;p>Optional: Fork neurocontainers and setup github actions&lt;/p>
&lt;ol>
&lt;li>Fork &lt;a href="https://github.com/NeuroDesk/neurocontainers">https://github.com/NeuroDesk/neurocontainers&lt;/a> into your account.&lt;/li>
&lt;li>Go to your neurocontainers fork.&lt;/li>
&lt;li>If Actions tab is missing, go to Settings &amp;gt; Actions. Select Allow all actions. Then Save.&lt;/li>
&lt;li>In the actions tab, select &amp;ldquo;I understand my workflows, go ahead and enable them&amp;rdquo;&lt;/li>
&lt;/ol>
&lt;p>Pushes to the recipes in your fork will now trigger actions to build the respective docker container, and push them to your Github Packages.&lt;/p>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://github.com/NeuroDesk/neurocontainers">https://github.com/NeuroDesk/neurocontainers&lt;/a>&lt;/p>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>git clone https://github.com/NeuroDesk/neurocontainers/&lt;/code>&lt;/pre>
&lt;ol start="3">
&lt;li>Copy the directory template and rename to &lt;em>newapp&lt;/em> in &lt;code>neurocontainers/recipes&lt;/code>&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>cd neurocontainers/recipes
cp -R template newapp&lt;/code>&lt;/pre>
&lt;ol start="4">
&lt;li>Modify &lt;code>build.sh&lt;/code> in &lt;code>neurocontainers/recipes/newapp&lt;/code> to build your application and update README.md (make sure the version is correct in the README!)&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$" data-output="2-3">&lt;code>cd newapp
(edit build.sh as required)
(edit README.md as required)&lt;/code>&lt;/pre>
&lt;p>Upload your application to object storage first if needed, so you can then download it in build.sh (ask for instructions about this if you don&amp;rsquo;t know the key, and never share it anywhere public!)&lt;/p>
&lt;ol start="5">
&lt;li>Run update-builders.sh - This will auto-create the CI workflow for the application (or manually duplicate the template file and rename all occurances of template to &lt;em>newapp&lt;/em>)&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>cd ../..
sh update-builders.sh&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>if the CI build runs out of space, add the application to the following txt to add additional space.
&lt;a href="https://github.com/NeuroDesk/neurocontainers/blob/master/.github/workflows/free-up-space-list.txt">https://github.com/NeuroDesk/neurocontainers/blob/master/.github/workflows/free-up-space-list.txt&lt;/a>.
Note this, significantly increases CI run time, only use in cases of space errors.&lt;/p>
&lt;/blockquote>
&lt;ol start="6">
&lt;li>
&lt;p>Build and test the container locally&lt;/p>
&lt;ol>
&lt;li>clone our fork of Neurodocker: git clone &lt;a href="https://github.com/NeuroDesk/neurodocker/">https://github.com/NeuroDesk/neurodocker/&lt;/a>&lt;/li>
&lt;li>install neurodocker: cd neurodocker; python -m pip install .&lt;/li>
&lt;li>run the build script with the &amp;ndash;debug flag: &lt;a href="https://github.com/NeuroDesk/neurocontainers/blob/master/recipes/lcmodel/build.sh">https://github.com/NeuroDesk/neurocontainers/blob/master/recipes/lcmodel/build.sh&lt;/a>&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>chmod +x build.sh
./build.sh -debug&lt;/code>&lt;/pre>
&lt;ol start="4">
&lt;li>test running some commands within the container that should be available in your local docker container repository&lt;/li>
&lt;li>if your application requires a Matlab Runtime and you get an error about shared library &amp;ldquo;libmwlaunchermain.so&amp;rdquo; not found, check which version of the runtime was installed by the build script&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Update changes in local git repository&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>git add recipes/newapp/build.sh recipes/newapp/README.md .github/workflows/newapp.yml
git config user.email "the email that you use for github"
git config user.name "your name"
git commit&lt;/code>&lt;/pre>
&lt;ol start="8">
&lt;li>Generate git personal access token (if you don’t have one already)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Browse to https://github.com/NeuroDesk/neurocontainers/
Press on your picture in upper right corner --&amp;gt; Setting --&amp;gt; Developer Settings --&amp;gt; Personal Access Token
Press on “generate personal access token”
Write something in “Notes” (doesn’t matter what, it’s for your own use)
Check “repo”
Check “Workflow”
Press “Generate Token” at the bottom
Copy the token displayed on the screen into a file, so you’ll have it later
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="9">
&lt;li>Test the container locally, and if successful push repo to trigger the automatic build on GitHub&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>git pull
git push&lt;/code>&lt;/pre>
&lt;ol start="10">
&lt;li>
&lt;p>Go to neurocontainers/actions. Check that the most recent workflow run in the list terminated successfully (green). Otherwise, click on it, click on “build docker”, and the line that caused the error will be highlighted&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Find your new package under &lt;a href="https://github.com/orgs/NeuroDesk/packages?repo_name=neurocontainers">https://github.com/orgs/NeuroDesk/packages?repo_name=neurocontainers&lt;/a>&lt;/p>
&lt;p>Enter the name of the package in the search box, and verify that the full package name shows up in the format &lt;em>toolName_toolVersion&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Obtain &lt;em>buildDate&lt;/em> by clicking on the full package name that came up in the search. The build date will be the newest date shown under &lt;strong>Recent tagged image versions&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;em>toolName&lt;/em>, &lt;em>toolVersion&lt;/em> and &lt;em>buildDate&lt;/em> from the previous two steps to manually download the package by typing the following in a terminal open in Neurodesktop&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>bash /neurocommand/local/fetch_and_run.sh toolName toolVersion buildDate
ml toolName/toolVersion&lt;/code>&lt;/pre>
&lt;p>For example:
If the full package name that comes up in the step 11 is itksnap_3.8.0, and the newest date under &lt;strong>Recent tagged image versions&lt;/strong> is 20210322&lt;/p>
&lt;p>The command to use in a terminal open in Neurodesktop is:&lt;/p>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>bash /neurocommand/local/fetch_and_run.sh itksnap 3.8.0 20210322
ml toolName/toolVersion&lt;/code>&lt;/pre>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Depreciation notice&lt;/h4>
&lt;p>For VNM users use:&lt;/p>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>bash /neurodesk/local/fetch_and_run.sh toolName toolVersion buildDate
ml toolName/toolVersion&lt;/code>&lt;/pre>
&lt;/div>
&lt;ol start="14">
&lt;li>Test the new container. Run some commands, to see all is good&lt;/li>
&lt;/ol>
&lt;p>If the container doesn&amp;rsquo;t work yet, it&amp;rsquo;s sometimes useful to try and troubleshoot it and install missing libraries. This can be achieved by running it in a writable mode with fakeroot enabled:&lt;/p>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>SINGULARITY_BINDPATH=''; singularity shell --writable --fakeroot /neurodesktop-storage/containers/toolName_toolVersion_buildDate/toolName_toolVersion_buildDate.simg&lt;/code>&lt;/pre>
&lt;ol start="15">
&lt;li>Fork &lt;a href="https://github.com/NeuroDesk/neurocommand/">https://github.com/NeuroDesk/neurocommand/&lt;/a> to your Github account&lt;/li>
&lt;li>Edit an entry for your package in your fork of neurocommand/blob/main/neurodesk/apps.json based on one of the other entries (generating one menu item for opening a terminal inside the containers, and one menu item for the GUI, if relevant). Notice that in the json file, the version field should contain the &lt;em>buildDate&lt;/em>&lt;/li>
&lt;li>Include an icon file in your fork of neurocommand/tree/main/neurodesk/icons&lt;/li>
&lt;li>Send a pull request from your fork of neurocommand to &lt;a href="https://github.com/NeuroDesk/neurocommand/">https://github.com/NeuroDesk/neurocommand/&lt;/a>&lt;/li>
&lt;li>When the pull request is merged by Neurodesk admins, it will trigger an action to build the singularity container, distribute it in all object storage locations and on CVMFS, and it will update the menus in the desktop image on the next daily build&lt;/li>
&lt;li>Check in the dev build if everything is ok before releasing a new version of Neurodesktop:&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>sudo docker pull vnmd/neurodesktop-dev:latest &amp;&amp; sudo docker run --shm-size=1gb -it --privileged --name neurodesktop -v ~/neurodesktop-storage:/neurodesktop-storage -e HOST_UID="$(id -u)" -e HOST_GID="$(id -g)" -p 8080:8080 -h neurodesktop-dev vnmd/neurodesktop-dev:latest&lt;/code>&lt;/pre>
&lt;ol start="21">
&lt;li>Consider contributing a tutorial about the new tool: &lt;a href="https://github.com/NeuroDesk/neurodesk.github.io/tree/hugo-docsy/content/en/tutorials">https://github.com/NeuroDesk/neurodesk.github.io/tree/hugo-docsy/content/en/tutorials&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Developers: Local Hugo Docsy</title><link>https://kel-github/neurodesk.github.io/developers/documentation/local-hugo-docsy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kel-github/neurodesk.github.io/developers/documentation/local-hugo-docsy/</guid><description>
&lt;h2 id="local-hugo-docsy">Local Hugo Docsy&lt;/h2>
&lt;h3 id="clone-repository">Clone repository&lt;/h3>
&lt;p>Using SSH&lt;/p>
&lt;p>&lt;code>git clone --recurse-submodules git@github.com:NeuroDesk/neurodesk.github.io.git&lt;/code>&lt;/p>
&lt;p>or Https:&lt;/p>
&lt;p>&lt;code>git clone --recurse-submodules https://github.com/NeuroDesk/neurodesk.github.io.git&lt;/code>&lt;/p>
&lt;h3 id="if-you-cloned-without---recurse-submodules">If you cloned without &amp;ndash;recurse-submodules&lt;/h3>
&lt;p>Run the following command to pull submodules&lt;/p>
&lt;p>&lt;code>git submodule update --init --recursive --remote&lt;/code>&lt;/p>
&lt;h3 id="download-hugo-binary">Download Hugo binary&lt;/h3>
&lt;p>Hugo releases are on &lt;a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases&lt;/a>&lt;/p>
&lt;p>Download latest version of hugo extended&lt;/p>
&lt;p>e.g. for windows: &lt;a href="https://github.com/gohugoio/hugo/releases/download/v0.88.1/hugo_extended_0.88.1_Windows-64bit.zip">https://github.com/gohugoio/hugo/releases/download/v0.88.1/hugo_extended_0.88.1_Windows-64bit.zip&lt;/a>&lt;/p>
&lt;h3 id="start-local-hugo-server">Start local hugo server&lt;/h3>
&lt;p>Extract hugo binary (hugo.exe) to your neurodesk.github.io dir&lt;/p>
&lt;p>Run server for windows: &lt;code>.\hugo.exe server --disableFastRender&lt;/code>&lt;/p>
&lt;p>Once started, dev website will be accessible via http://localhost:1313&lt;/p>
&lt;h3 id="update-docsy-theme-submodule">Update docsy theme submodule&lt;/h3>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>git submodule update --remote
git add themes/
git commit -m "Updating theme submodule"
git push origin hugo-docsy&lt;/code>&lt;/pre></description></item><item><title>Developers: Menu entries</title><link>https://kel-github/neurodesk.github.io/developers/new_tools/menu_entries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kel-github/neurodesk.github.io/developers/new_tools/menu_entries/</guid><description>
&lt;h2 id="menu-entry">Menu entry&lt;/h2>
&lt;p>As we want to propose several versions of the tools, each piece of software should have its own submenu under &lt;code>VNM Neuroimaging&lt;/code>.
To do so, you first have to add a submenu to &lt;code>menus/vnm-applications.menu&lt;/code> by adding:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#8f5902;font-style:italic">&amp;lt;!-- [[Tool Name]] submenu --&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;Menu&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;Name&amp;gt;&lt;/span>[[Tool Name]]&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/Name&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;Directory&amp;gt;&lt;/span>vnm-[[tool-name]].directory&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/Directory&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;Include&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;And&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;Category&amp;gt;&lt;/span>[[Tool-Name]]&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/Category&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/And&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/Include&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/Menu&amp;gt;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;!-- End [[Tool Name]] --&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following table shows the formatting rules to follow:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Placeholder&lt;/th>
&lt;th>Rule&lt;/th>
&lt;th>Example&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>[[Tool name]]&lt;/code>&lt;/td>
&lt;td>Capitalized, spaces&lt;/td>
&lt;td>&lt;code>ITK snap&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[tool-name]]&lt;/code>&lt;/td>
&lt;td>Lower case, no spaces (use &lt;code>-&lt;/code> instead)&lt;/td>
&lt;td>&lt;code>itk-snap&lt;/code> or &lt;code>itksnap&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[Tool-name]]&lt;/code>&lt;/td>
&lt;td>Capitalized, no spaces (use &lt;code>-&lt;/code> instead)&lt;/td>
&lt;td>&lt;code>ITK-snap&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Next, we have to create the submenu itself as we referenced it by &lt;code>vnm-[[tool-name]].directory&lt;/code>. To do so, create the file &lt;code>menus/submenus/vnm-[[tool-name]].directory&lt;/code> and add the following information inside:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#204a87;font-weight:bold">[Desktop Entry]&lt;/span>
&lt;span style="color:#c4a000">Name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">[[Tool Name]]&lt;/span>
&lt;span style="color:#c4a000">Comment&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">[[Tool Name]]&lt;/span>
&lt;span style="color:#c4a000">Icon&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">/home/neuro/.config/lxpanel/LXDE/icons/[[icon-name]].png&lt;/span>
&lt;span style="color:#c4a000">Type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">Directory&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If a specific icon is available in the &lt;code>menus/icons&lt;/code> directory, replace &lt;code>[[icon-name]]&lt;/code> by its name. Otherwise, use &lt;code>vnm&lt;/code>.&lt;/p>
&lt;h2 id="create-the-application">Create the application&lt;/h2>
&lt;p>Finally, we have to create the actual application by creating the file &lt;code>menus/applications/vnm-[[tool-name]]-[[0.0.0]].desktop&lt;/code>. The name of this file must contain the version of the tool (once again to allow multiple versions to live inside the same directory). Add the following description to this file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#204a87;font-weight:bold">[Desktop Entry]&lt;/span>
&lt;span style="color:#c4a000">Name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">[[Tool Name]] [[0.0.0]] [[(Install only)]]&lt;/span>
&lt;span style="color:#c4a000">GenericName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">[[Tool Name]] [[0.0.0]]&lt;/span>
&lt;span style="color:#c4a000">Comment&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">The description of what clicking on this application does. # This will be the tooltip of the application.&lt;/span>
&lt;span style="color:#c4a000">Exec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">The command used to run the application.&lt;/span>
&lt;span style="color:#c4a000">Icon&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">/home/neuro/.config/lxpanel/LXDE/icons/[[icon-name]].png&lt;/span>
&lt;span style="color:#c4a000">Type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">Application&lt;/span>
&lt;span style="color:#c4a000">Categories&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">[[Tool-name]]&lt;/span>
&lt;span style="color:#c4a000">Terminal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">true # or false&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The important part here is the value of &lt;code>Exec&lt;/code>. If the tool is in the form of a singularity image, you should run the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">bash /usr/share/fetch_and_run.sh &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span>tool-name&lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span>0.0.0&lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span>YYYYMMDD&lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span>cmd&lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span>args&lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What &lt;code>fetch_and_run.sh&lt;/code> does is check if the image is already installed as a module. If not, it checks whether it can be installed or not (return &lt;code>1&lt;/code> if not possible). After that, it installs the image as a module.
If &lt;code>[[cmd]]&lt;/code> is specified, once the image is installed, it runs the command by giving the arguments from &lt;code>[[args]]&lt;/code>.
Here are two examples for FreeSurfer and FreeView. This first one only installs the image as a module:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">bash /usr/share/fetch_and_run.sh freesurfer 6.0.1 &lt;span style="color:#0000cf;font-weight:bold">20200506&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And this does the same but runs FreeView afterward:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">bash /usr/share/fetch_and_run.sh freesurfer 6.0.1 &lt;span style="color:#0000cf;font-weight:bold">20200506&lt;/span> freeview
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The resulting &lt;code>.desktop&lt;/code> file corresponding to FreeView contains:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#204a87;font-weight:bold">[Desktop Entry]&lt;/span>
&lt;span style="color:#c4a000">Name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">FreeView 6.0.1&lt;/span>
&lt;span style="color:#c4a000">GenericName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">FreeView 6.0.1&lt;/span>
&lt;span style="color:#c4a000">Comment&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">Start FreeView 6.0.1&lt;/span>
&lt;span style="color:#c4a000">Exec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">bash /usr/share/fetch_and_run.sh freesurfer 6.0.1 20200506 freeview&lt;/span>
&lt;span style="color:#c4a000">Icon&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">/home/neuro/.config/lxpanel/LXDE/icons/run.png&lt;/span>
&lt;span style="color:#c4a000">Type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">Application&lt;/span>
&lt;span style="color:#c4a000">Categories&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">FreeSurfer&lt;/span>
&lt;span style="color:#c4a000">Terminal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Developers: Setup CVMFS Proxy</title><link>https://kel-github/neurodesk.github.io/developers/cvmfs/proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kel-github/neurodesk.github.io/developers/cvmfs/proxy/</guid><description>
&lt;p>If you want more speed in a region one way could be to setup another Stratum 1 server or a proxy. We currently don&amp;rsquo;t run any proxy servers but it would be important for using it on a cluster.&lt;/p>
&lt;pre class="language-batch command-line" data-prompt=">" data-output="2-4">
&lt;code>docker run --shm-size=1gb -it --privileged --name neurodesktop `
-v C:/neurodesktop-storage:/neurodesktop-storage -p 8080:8080 `
-h neurodesktop-20220111 `
vnmd/neurodesktop:20220111&lt;/code>
&lt;/pre>
&lt;h1 id="setup-a-cvmfs-proxy-server">Setup a CVMFS proxy server&lt;/h1>
&lt;pre class="language-shell command-line" data-prompt="$">
&lt;code>sudo yum install -y squid&lt;/code>
&lt;/pre>
&lt;p>Open the &lt;code>squid.conf&lt;/code>and use the following configuration&lt;/p>
&lt;pre class="language-shell command-line" data-prompt="$">
&lt;code>sudo vi /etc/squid/squid.conf&lt;/code>
&lt;/pre>
&lt;pre class="language-shell">
&lt;code># List of local IP addresses (separate IPs and/or CIDR notation) allowed to access your local proxy
#acl local_nodes src YOUR_CLIENT_IPS
# Destination domains that are allowed
#acl stratum_ones dstdomain .YOURDOMAIN.ORG
#acl stratum_ones dstdom_regex YOUR_REGEX
acl stratum_ones dst 140.238.211.92
# Squid port
http_port 3128
# Deny access to anything which is not part of our stratum_ones ACL.
http_access deny !stratum_ones
# Only allow access from our local machines
#http_access allow local_nodes
http_access allow localhost
# Finally, deny all other access to this proxy
http_access deny all
minimum_expiry_time 0
maximum_object_size 1024 MB
cache_mem 128 MB
maximum_object_size_in_memory 128 KB
# 5 GB disk cache
cache_dir ufs /var/spool/squid 5000 16 256
&lt;/code>
&lt;/pre>
&lt;pre class="language-shell command-line" data-prompt="$">
&lt;code>sudo squid -k parse
sudo systemctl start squid
sudo systemctl enable squid
sudo systemctl status squid
sudo systemctl restart squid&lt;/code>
&lt;/pre></description></item><item><title>Developers: Neurodesktop Release Process</title><link>https://kel-github/neurodesk.github.io/developers/architecture/release_process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kel-github/neurodesk.github.io/developers/architecture/release_process/</guid><description>
&lt;ol>
&lt;li>Check if the last automated build ran OK: &lt;a href="https://github.com/NeuroDesk/neurodesktop/actions">https://github.com/NeuroDesk/neurodesktop/actions&lt;/a>&lt;/li>
&lt;li>Run this build date and test if everything is ok and no regression happened&lt;/li>
&lt;li>Check what changes where made since the last release: &lt;a href="https://github.com/NeuroDesk/neurodesktop/commits/main">https://github.com/NeuroDesk/neurodesktop/commits/main&lt;/a>&lt;/li>
&lt;li>Summarize the main changes and copy this to the Release History and the news section:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;a href="https://neurodesk.github.io/docs/neurodesktop/release-history/">https://neurodesk.github.io/docs/neurodesktop/release-history/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://neurodesk.github.io/blog/releases/">https://neurodesk.github.io/blog/releases/&lt;/a>&lt;/li>
&lt;/ul>
&lt;ol start="5">
&lt;li>Change the version of the latest desktop in &lt;a href="https://github.com/NeuroDesk/neurodesk.github.io/blob/hugo-docsy/data/neurodesktop.toml">https://github.com/NeuroDesk/neurodesk.github.io/blob/hugo-docsy/data/neurodesktop.toml&lt;/a>&lt;/li>
&lt;li>Commit all changes&lt;/li>
&lt;li>Tweet a quick summary of the changes and announce new version: &lt;a href="https://twitter.com/neuro_desk">https://twitter.com/neuro_desk&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Developers: CVMFS architecture</title><link>https://kel-github/neurodesk.github.io/developers/cvmfs/cvmfs_architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kel-github/neurodesk.github.io/developers/cvmfs/cvmfs_architecture/</guid><description>
&lt;p>We store our singuarlity containers unpacked on CVMFS. We tried the DUCC tool in the beginning, but it was causing too many issues with dockerhub and we were rate limited. The script to unpack our singularity containers is here: &lt;a href="https://github.com/NeuroDesk/neurocommand/blob/main/cvmfs/sync_containers_to_cvmfs.sh">https://github.com/NeuroDesk/neurocommand/blob/main/cvmfs/sync_containers_to_cvmfs.sh&lt;/a>&lt;/p>
&lt;p>It gets called by a cronjob on the CVMFS Stratum 0 server and relies on the log.txt file being updated via an action in the neurocommand repository (&lt;a href="https://github.com/NeuroDesk/neurocommand/blob/main/.github/workflows/upload_containers_simg.sh">https://github.com/NeuroDesk/neurocommand/blob/main/.github/workflows/upload_containers_simg.sh&lt;/a>)&lt;/p>
&lt;p>The Stratum 1 servers then pull this repo from Stratum 0 and our desktops mount these repos (configured here: &lt;a href="https://github.com/NeuroDesk/neurodesktop/blob/main/Dockerfile">https://github.com/NeuroDesk/neurodesktop/blob/main/Dockerfile&lt;/a>)&lt;/p>
&lt;p>The startup script (&lt;a href="https://github.com/NeuroDesk/neurodesktop/blob/main/config/startup.sh">https://github.com/NeuroDesk/neurodesktop/blob/main/config/startup.sh&lt;/a>) sets up CVMFS and tests which server is fastest during the container startup.&lt;/p>
&lt;p>This can also be done manually:&lt;/p>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>sudo cvmfs_talk -i neurodesk.ardc.edu.au host info
sudo cvmfs_talk -i neurodesk.ardc.edu.au host probe
cvmfs_config stat -v neurodesk.ardc.edu.au&lt;/code>&lt;/pre>&lt;blockquote>
&lt;/blockquote></description></item><item><title>Developers: Setup Stratum 0 server</title><link>https://kel-github/neurodesk.github.io/developers/cvmfs/stratum0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kel-github/neurodesk.github.io/developers/cvmfs/stratum0/</guid><description>
&lt;h2 id="setup-a-stratum-0-server">Setup a Stratum 0 server:&lt;/h2>
&lt;h3 id="setup-storage">Setup Storage&lt;/h3>
&lt;p>(would object storage be better? -&amp;gt; see comment below under next iteration ideas)&lt;/p>
&lt;pre class="language-shell command-line" data-prompt="$">
&lt;code>lsblk -l
sudo mkfs.ext4 /dev/vdb
sudo mkdir /storage
sudo mount /dev/vdb /storage/ -t auto
sudo chown ec2-user /storage/
sudo chmod a+rwx /storage/&lt;/code>
&lt;/pre>
&lt;pre class="language-shell command-line" data-prompt="$" data-output="2">
&lt;code>sudo vi /etc/fstab
/dev/vdb /storage auto defaults,nofail 0 2&lt;/code>
&lt;/pre>
&lt;h3 id="setup-server">Setup server&lt;/h3>
&lt;pre class="language-shell command-line" data-prompt="$" data-output="41, 44-52">
&lt;code>sudo yum install vim htop gcc git screen
sudo timedatectl set-timezone Australia/Brisbane
sudo yum install -y https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest.noarch.rpm
sudo yum install -y cvmfs cvmfs-server
sudo systemctl enable httpd
sudo systemctl restart httpd
# sudo systemctl stop firewalld
# restore keys:
sudo mkdir /etc/cvmfs/keys/incoming
sudo chmod a+rwx /etc/cvmfs/keys/incoming
cd connections/cvmfs_keys/
scp neuro* ec2-user@203.101.226.164:/etc/cvmfs/keys/incoming
sudo mv /etc/cvmfs/keys/incoming/* /etc/cvmfs/keys/
#backup keys:
#mkdir cvmfs_keys
#scp opc@158.101.127.61:/etc/cvmfs/keys/neuro* .
sudo cvmfs_server mkfs -o $USER neurodesk.ardc.edu.au
cd /storage
sudo mkdir -p cvmfs-storage/srv/
cd /srv/
sudo mv cvmfs/ /storage/cvmfs-storage/srv/
sudo ln -s /storage/cvmfs-storage/srv/cvmfs/
cd /var/spool
sudo mkdir /storage/spool
sudo mv cvmfs/ /storage/spool/
sudo ln -s /storage/spool/cvmfs .
cvmfs_server transaction neurodesk.ardc.edu.au
cvmfs_server publish neurodesk.ardc.edu.au&lt;/code>
&lt;/pre>
&lt;pre class="language-shell command-line" data-prompt="$" data-ouput="2">
&lt;code>sudo vi /etc/cron.d/cvmfs_resign&lt;/code>
&lt;/pre>
&lt;pre class="language-shell">
&lt;code>0 11 * * 1 root /usr/bin/cvmfs_server resign neurodesk.ardc.edu.au&lt;/code>
&lt;/pre>
&lt;pre class="language-shell command-line" data-prompt="$" data-ouput="2">
&lt;code>cat /etc/cvmfs/keys/neurodesk.ardc.edu.au.pub&lt;/code>
&lt;/pre>
&lt;pre class="language-shell">
&lt;code>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuV9JBs9uXBR83qUs7AiE
nSQfvh6VCdNigVzOfRMol5cXsYq3cFy/Vn1Nt+7SGpDTQArQieZo4eWC9ww2oLq0
vY1pWyAms3Y4i+IUmMbwNifDU4GQ1KN9u4zl9Peun2YQCLE7mjC0ZLQtLM7Q0Z8h
NwP8jRJTN+u8mRKzkyxfSMLscVMKhm2pAwnT1zB9i3bzVV+FSnidXq8rnnzNHMgv
tfqx1h0gVyTeodToeFeGG5vq69wGZlwEwBJWVRGzzr+a8dWNBFMJ1HxamrBEBW4P
AxOKGHmQHTGbo+tdV/K6ZxZ2Ry+PVedNmbON/EPaGlI8Vd0fascACfByqqeUEhAB
dQIDAQAB
-----END PUBLIC KEY-----&lt;/code>
&lt;/pre>
&lt;h2 id="next-iteration-of-this">Next iteration of this:&lt;/h2>
&lt;h3 id="use-object-storage">use object storage?&lt;/h3>
&lt;ul>
&lt;li>current implementation uses block storage, but this makes increasing the volume size a bit more work&lt;/li>
&lt;li>we coulddn&amp;rsquo;t get object storage to work on Oracle as it assumes AWS S3&lt;/li>
&lt;/ul>
&lt;h3 id="optimize-settings-for-repositories-for-container-images">Optimize settings for repositories for Container Images&lt;/h3>
&lt;p>from the CVMFS documentation:
Repositories containing Linux container image contents (that is: container root file systems) should use overlayfs as a union file system and have the following configuration:&lt;/p>
&lt;pre>&lt;code>CVMFS_INCLUDE_XATTRS=true
CVMFS_VIRTUAL_DIR=true
&lt;/code>&lt;/pre>
&lt;p>Extended attributes of files, such as file capabilities and SElinux attributes, are recorded. And previous file system revisions can be accessed from the clients.&lt;/p>
&lt;h2 id="currently-not-used">Currently not used&lt;/h2>
&lt;p>We tested the DUCC tool in the beginning, but it was leading to too many docker pulls and we therefore replaced it with our own script: &lt;a href="https://github.com/NeuroDesk/neurocommand/blob/main/cvmfs/sync_containers_to_cvmfs.sh">https://github.com/NeuroDesk/neurocommand/blob/main/cvmfs/sync_containers_to_cvmfs.sh&lt;/a>&lt;/p>
&lt;p>This is the old DUCC setup&lt;/p>
&lt;pre class="language-shell command-line" data-prompt="$">
&lt;code>sudo yum install cvmfs-ducc.x86_64
sudo -i
dnf install -y yum-utils
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
dnf install docker-ce docker-ce-cli containerd.io
systemctl enable docker
systemctl start docker
docker version
docker info
# leave root mode
sudo groupadd docker
sudo usermod -aG docker $USER
sudo chown root:docker /var/run/docker.sock
newgrp docker
vi convert_appsjson_to_wishlist.sh
export DUCC_DOCKER_REGISTRY_PASS=configure_secret_password_here_and_dont_push_to_github
cd neurodesk
git pull
./gen_cvmfs_wishlist.sh
cvmfs_ducc convert recipe_neurodesk_auto.yaml
cd ..
chmod +x convert_appsjson_to_wishlist.sh
git clone https://github.com/NeuroDesk/neurodesk/
# setup cron job
sudo vi /etc/cron.d/cvmfs_dockerpull
*/5 * * * * opc cd ~ &amp;&amp; bash /home/opc/convert_appsjson_to_wishlist.sh
#vi recipe.yaml
##version: 1
#user: vnmd
#cvmfs_repo: neurodesk.ardc.edu.au
#output_format: '$(scheme)://$(registry)/vnmd/thin_$(image)'
#input:
#- 'https://registry.hub.docker.com/vnmd/tgvqsm_1.0.0:20210119'
#- 'https://registry.hub.docker.com/vnmd/itksnap_3.8.0:20201208'
#cvmfs_ducc convert recipe_neurodesk.yaml
#cvmfs_ducc convert recipe_unpacked.yaml&lt;/code>
&lt;/pre>&lt;blockquote>
&lt;/blockquote></description></item><item><title>Developers: Setup Stratum 1 server</title><link>https://kel-github/neurodesk.github.io/developers/cvmfs/stratum1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kel-github/neurodesk.github.io/developers/cvmfs/stratum1/</guid><description>
&lt;p>The stratum 1 servers for the desktop are configured here: &lt;a href="https://github.com/NeuroDesk/neurodesktop/blob/main/Dockerfile">https://github.com/NeuroDesk/neurodesktop/blob/main/Dockerfile&lt;/a>&lt;/p>
&lt;p>If you want more speed in a region one way could be to setup another Stratum 1 server or a proxy.&lt;/p>
&lt;h1 id="setup-a-stratum-1-server">Setup a Stratum 1 server:&lt;/h1>
&lt;pre class="language-shell command-line" data-prompt="$">
&lt;code>sudo yum install -y https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest.noarch.rpm
sudo yum install -y cvmfs-server squid
sudo yum install -y python3-mod_wsgi
sudo sed -i 's/Listen 80/Listen 127.0.0.1:8080/' /etc/httpd/conf/httpd.conf
set +H
echo "http_port 80 accel" | sudo tee /etc/squid/squid.conf
echo "http_port 8000 accel" | sudo tee -a /etc/squid/squid.conf
echo "http_access allow all" | sudo tee -a /etc/squid/squid.conf
echo "cache_peer 127.0.0.1 parent 8080 0 no-query originserver" | sudo tee -a /etc/squid/squid.conf
echo "acl CVMFSAPI urlpath_regex ^/cvmfs/[^/]*/api/" | sudo tee -a /etc/squid/squid.conf
echo "cache deny !CVMFSAPI" | sudo tee -a /etc/squid/squid.conf
echo "cache_mem 128 MB" | sudo tee -a /etc/squid/squid.conf
sudo systemctl start httpd
sudo systemctl start squid
sudo systemctl enable httpd
sudo systemctl enable squid
echo 'CVMFS_GEO_LICENSE_KEY=kGepdzqbAP4fjf5X' | sudo tee -a /etc/cvmfs/server.local
sudo chmod 600 /etc/cvmfs/server.local
sudo mkdir -p /etc/cvmfs/keys/ardc.edu.au/
echo "-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwUPEmxDp217SAtZxaBep
Bi2TQcLoh5AJ//HSIz68ypjOGFjwExGlHb95Frhu1SpcH5OASbV+jJ60oEBLi3sD
qA6rGYt9kVi90lWvEjQnhBkPb0uWcp1gNqQAUocybCzHvoiG3fUzAe259CrK09qR
pX8sZhgK3eHlfx4ycyMiIQeg66AHlgVCJ2fKa6fl1vnh6adJEPULmn6vZnevvUke
I6U1VcYTKm5dPMrOlY/fGimKlyWvivzVv1laa5TAR2Dt4CfdQncOz+rkXmWjLjkD
87WMiTgtKybsmMLb2yCGSgLSArlSWhbMA0MaZSzAwE9PJKCCMvTANo5644zc8jBe
NQIDAQAB
-----END PUBLIC KEY-----" | sudo tee /etc/cvmfs/keys/ardc.edu.au/neurodesk.ardc.edu.au.pub
sudo cvmfs_server add-replica -o $USER http://203.101.226.164/cvmfs/neurodesk.ardc.edu.au /etc/cvmfs/keys/ardc.edu.au
# CVMFS will store everything in /srv/cvmfs so make sure there is enough space or create a symlink to a bigger storage volume
# e.g.:
&lt;!-- cd /storage
sudo mkdir -p cvmfs-storage/srv/
cd /srv/
sudo mv cvmfs/ /storage/cvmfs-storage/srv/
sudo ln -s /storage/cvmfs-storage/srv/cvmfs/ -->
sudo cvmfs_server snapshot neurodesk.ardc.edu.au
echo "/var/log/cvmfs/*.log {
weekly
missingok
notifempty
}" | sudo tee /etc/logrotate.d/cvmfs
echo '*/5 * * * * root output=$(/usr/bin/cvmfs_server snapshot -a -i 2>&amp;1) || echo "$output" ' | sudo tee /etc/cron.d/cvmfs_stratum1_snapshot
sudo yum install iptables
sudo iptables -t nat -A PREROUTING -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8000
sudo systemctl disable firewalld
sudo systemctl stop firewalld
# make sure that port 80 is open in the real firewall
sudo cvmfs_server update-geodb&lt;/code>
&lt;/pre>&lt;blockquote>
&lt;/blockquote></description></item><item><title>Developers: Neurodesk Architecture</title><link>https://kel-github/neurodesk.github.io/developers/architecture/neurodesk-compoents/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kel-github/neurodesk.github.io/developers/architecture/neurodesk-compoents/</guid><description>
&lt;h1 id="layers">Layers&lt;/h1>
&lt;p>Neurodesktop: &lt;a href="https://github.com/NeuroDesk/neurodesktop">https://github.com/NeuroDesk/neurodesktop&lt;/a>&lt;/p>
&lt;ul>
&lt;li>docker container with interface modifications&lt;/li>
&lt;li>contains tools necessary to manage workflows in sub-containers: vscode, git&lt;/li>
&lt;li>CI: builds docker image and tests if it runs; tests if CVMFS servers are OK before deployment&lt;/li>
&lt;li>CD: pushes images to github &amp;amp; docker registry&lt;/li>
&lt;/ul>
&lt;p>Neurocommand: &lt;a href="https://github.com/NeuroDesk/neurocommand">https://github.com/NeuroDesk/neurocommand&lt;/a>&lt;/p>
&lt;ul>
&lt;li>script to install and manage multiple containers using transparent singularity on any linux system&lt;/li>
&lt;li>this repo also handles the creation of menu entries in a general form applicable to different desktop environments&lt;/li>
&lt;li>this repo can be re-used in other projects like CVL and when installing it on a bare-metal workstations&lt;/li>
&lt;li>CI: tests if containers can be installed&lt;/li>
&lt;li>CD: this repo checks if containers requested in apps.json file are availabe on object storage and if not converts the singularity containers based on the docker containers and uploads them to object storage&lt;/li>
&lt;/ul>
&lt;p>transparent-singularity: &lt;a href="https://github.com/NeuroDesk/transparent-singularity">https://github.com/NeuroDesk/transparent-singularity&lt;/a>&lt;/p>
&lt;ul>
&lt;li>script to install neuro-sub-containers, installers are called by neurocommand&lt;/li>
&lt;li>this repo provides a way of using our containers on HPCs for large scale processing of the pipelines (including the support of SLURM and other job schedulers)&lt;/li>
&lt;li>CI: test if exposing of binaries from container works&lt;/li>
&lt;/ul>
&lt;p>Neurocontainers: &lt;a href="https://github.com/NeuroDesk/neurocontainers">https://github.com/NeuroDesk/neurocontainers&lt;/a>&lt;/p>
&lt;ul>
&lt;li>build scripts for neuro-sub-containers&lt;/li>
&lt;li>CI: building and testing of containers&lt;/li>
&lt;li>CD: pushing containers to github and dockerhub registry&lt;/li>
&lt;/ul>
&lt;p>Neurodocker: &lt;a href="https://github.com/NeuroDesk/neurodocker">https://github.com/NeuroDesk/neurodocker&lt;/a>&lt;/p>
&lt;ul>
&lt;li>fork of neurodocker project&lt;/li>
&lt;li>provides recipes for our containers built&lt;/li>
&lt;li>we are providing pull requests back of recipes&lt;/li>
&lt;li>CI: handled by &lt;a href="https://github.com/ReproNim/neurodocker">neurodocker&lt;/a> - testing of generating container recipes&lt;/li>
&lt;/ul></description></item><item><title>Developers: Neurodesktop Dev</title><link>https://kel-github/neurodesk.github.io/developers/architecture/neurodesk-dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kel-github/neurodesk.github.io/developers/architecture/neurodesk-dev/</guid><description>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
For development and testing only. Not recommended for production use
&lt;/div>
&lt;h2 id="building-neurodesktop-dev">Building neurodesktop-dev&lt;/h2>
&lt;p>Dev builds can be triggered by Neurodesk admins from &lt;a href="https://github.com/NeuroDesk/neurodesktop/actions/workflows/build-neurodesktop-dev.yml">https://github.com/NeuroDesk/neurodesktop/actions/workflows/build-neurodesktop-dev.yml&lt;/a>&lt;/p>
&lt;h2 id="running-latest-neurodesktop-dev">Running latest neurodesktop-dev&lt;/h2>
&lt;h3 id="linux">Linux&lt;/h3>
&lt;pre class="language-shell command-line" data-prompt="$" data-output="3-7">
&lt;code>docker pull vnmd/neurodesktop-dev:latest
sudo docker run \
--shm-size=1gb -it --cap-add SYS_ADMIN \
--security-opt apparmor:unconfined --device=/dev/fuse \
--name neurodesktop-dev \
-v ~/neurodesktop-storage:/neurodesktop-storage \
-e HOST_UID="$(id -u)" -e HOST_GID="$(id -g)" \
-p 8080:8080 -h neurodesktop-dev \
vnmd/neurodesktop-dev:latest&lt;/code>
&lt;/pre>
&lt;h3 id="windows">Windows&lt;/h3>
&lt;pre class="language-batch command-line" data-prompt=">">
&lt;code>docker pull vnmd/neurodesktop-dev:latest
docker run --shm-size=1gb -it --cap-add SYS_ADMIN --security-opt apparmor:unconfined --device=/dev/fuse --name neurodesktop -v C:/neurodesktop-storage:/neurodesktop-storage -p 8080:8080 -h neurodesktop-dev vnmd/neurodesktop-dev:latest&lt;/code>
&lt;/pre></description></item></channel></rss>