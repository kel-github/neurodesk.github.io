<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NeuroDesk – How to add new tools</title><link>https://kel-github/neurodesk.github.io/developers/new_tools/</link><description>Recent content in How to add new tools on NeuroDesk</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://kel-github/neurodesk.github.io/developers/new_tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Developers: Add tools</title><link>https://kel-github/neurodesk.github.io/developers/new_tools/add_tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kel-github/neurodesk.github.io/developers/new_tools/add_tool/</guid><description>
&lt;p>The goal of &lt;em>neurodesk&lt;/em> is to provide users with a large choice of tools to use in their pipelines.
Use the guide below to add a tool to &lt;em>neurodesktop&lt;/em> or &lt;em>neurocontainers&lt;/em>.&lt;/p>
&lt;h2 id="guiding-principles">Guiding principles&lt;/h2>
&lt;p>To decide if a tool should be packaged in a singularity container in &lt;em>neurocontainers&lt;/em> or be installed in the &lt;em>neurodesktop&lt;/em> container we are currently following these guiding principles:&lt;/p>
&lt;ol>
&lt;li>&lt;em>neurodesk&lt;/em> is not a package manager. This means we are not distributing tools in containers that can easily be installed via a standard package manager&lt;/li>
&lt;li>&lt;em>neurodesk&lt;/em> allows users to have multiple versions of tools in parallel via &lt;a href="https://lmod.readthedocs.io/en/latest/">lmod&lt;/a>, this means that if different versions of a tool can&amp;rsquo;t be installed in parallel we package the tool inside a container.&lt;/li>
&lt;li>&lt;em>neurodesk&lt;/em> aims to provide tooling to link tools from different containers (such as workflow managers like nipype or nextflow). This means that if a tool is required to coordinate various container-tools, it should be in the &lt;em>neurodesktop&lt;/em> container.&lt;/li>
&lt;/ol>
&lt;p>Examples:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>easy install&lt;/th>
&lt;th>coordinates containers&lt;/th>
&lt;th>small in size&lt;/th>
&lt;th>latest version is ok&lt;/th>
&lt;th>useful to most users&lt;/th>
&lt;th>Conclusion&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>git&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>neurodesktop&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lmod&lt;/td>
&lt;td>no&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>neurodesktop&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nipype&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>neurodesktop&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>vscode&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>neurodesktop&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>itksnap&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>no&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>container?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>convert3D&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>no&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fsl&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mrtrix&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>freesurfer&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>no&lt;/td>
&lt;td>container&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="adding-new-recipes">Adding new recipes&lt;/h2>
&lt;p>Refer to &lt;a href="https://github.com/NeuroDesk/neurodocker">neurodocker&lt;/a> for more information on neurodocker recipes&lt;/p>
&lt;h2 id="build-container">Build container&lt;/h2>
&lt;p>To build a container, set up environment with:&lt;/p>
&lt;ol>
&lt;li>Docker, the version in our CI environment&lt;/li>
&lt;li>Python, the version in our CI environment&lt;/li>
&lt;/ol>
&lt;p>And then follow these steps:&lt;/p>
&lt;ol>
&lt;li>Sync/modify Neurodocker, the dependency we are using to build containers:
&lt;ol>
&lt;li>Press &amp;ldquo;Fetch upstream&amp;rdquo; in &lt;a href="https://github.com/NeuroDesk/neurodocker">https://github.com/NeuroDesk/neurodocker&lt;/a> to check if our fork of Neurodocker is already up-to-date&lt;/li>
&lt;li>If there are upstream commits that are not synced yet, open an issue in &lt;a href="https://github.com/NeuroDesk/neurocontainers/issues">https://github.com/NeuroDesk/neurocontainers/issues&lt;/a>, requesting one of Neurodesk admins to pull-in latest changes from Neurodocker upstream into our fork of Neurodocker&lt;/li>
&lt;li>If relevant to your project, add recipe to neurodocker (&lt;a href="https://github.com/NeuroDesk/neurodocker">https://github.com/NeuroDesk/neurodocker&lt;/a>) and create a pull request to neurodocker (add new tool in a branch!)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Clone the neurocontainers repository:
&lt;div class="alert alert-primary" role="alert">
&lt;p>Optional: Fork neurocontainers and setup github actions&lt;/p>
&lt;ol>
&lt;li>Fork &lt;a href="https://github.com/NeuroDesk/neurocontainers">https://github.com/NeuroDesk/neurocontainers&lt;/a> into your account.&lt;/li>
&lt;li>Go to your neurocontainers fork.&lt;/li>
&lt;li>If Actions tab is missing, go to Settings &amp;gt; Actions. Select Allow all actions. Then Save.&lt;/li>
&lt;li>In the actions tab, select &amp;ldquo;I understand my workflows, go ahead and enable them&amp;rdquo;&lt;/li>
&lt;/ol>
&lt;p>Pushes to the recipes in your fork will now trigger actions to build the respective docker container, and push them to your Github Packages.&lt;/p>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://github.com/NeuroDesk/neurocontainers">https://github.com/NeuroDesk/neurocontainers&lt;/a>&lt;/p>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>git clone https://github.com/NeuroDesk/neurocontainers/&lt;/code>&lt;/pre>
&lt;ol start="3">
&lt;li>Copy the directory template and rename to &lt;em>newapp&lt;/em> in &lt;code>neurocontainers/recipes&lt;/code>&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>cd neurocontainers/recipes
cp -R template newapp&lt;/code>&lt;/pre>
&lt;ol start="4">
&lt;li>Modify &lt;code>build.sh&lt;/code> in &lt;code>neurocontainers/recipes/newapp&lt;/code> to build your application and update README.md (make sure the version is correct in the README!)&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$" data-output="2-3">&lt;code>cd newapp
(edit build.sh as required)
(edit README.md as required)&lt;/code>&lt;/pre>
&lt;p>Upload your application to object storage first if needed, so you can then download it in build.sh (ask for instructions about this if you don&amp;rsquo;t know the key, and never share it anywhere public!)&lt;/p>
&lt;ol start="5">
&lt;li>Run update-builders.sh - This will auto-create the CI workflow for the application (or manually duplicate the template file and rename all occurances of template to &lt;em>newapp&lt;/em>)&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>cd ../..
sh update-builders.sh&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>if the CI build runs out of space, add the application to the following txt to add additional space.
&lt;a href="https://github.com/NeuroDesk/neurocontainers/blob/master/.github/workflows/free-up-space-list.txt">https://github.com/NeuroDesk/neurocontainers/blob/master/.github/workflows/free-up-space-list.txt&lt;/a>.
Note this, significantly increases CI run time, only use in cases of space errors.&lt;/p>
&lt;/blockquote>
&lt;ol start="6">
&lt;li>
&lt;p>Build and test the container locally&lt;/p>
&lt;ol>
&lt;li>clone our fork of Neurodocker: git clone &lt;a href="https://github.com/NeuroDesk/neurodocker/">https://github.com/NeuroDesk/neurodocker/&lt;/a>&lt;/li>
&lt;li>install neurodocker: cd neurodocker; python -m pip install .&lt;/li>
&lt;li>run the build script with the &amp;ndash;debug flag: &lt;a href="https://github.com/NeuroDesk/neurocontainers/blob/master/recipes/lcmodel/build.sh">https://github.com/NeuroDesk/neurocontainers/blob/master/recipes/lcmodel/build.sh&lt;/a>&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>chmod +x build.sh
./build.sh -debug&lt;/code>&lt;/pre>
&lt;ol start="4">
&lt;li>test running some commands within the container that should be available in your local docker container repository&lt;/li>
&lt;li>if your application requires a Matlab Runtime and you get an error about shared library &amp;ldquo;libmwlaunchermain.so&amp;rdquo; not found, check which version of the runtime was installed by the build script&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Update changes in local git repository&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>git add recipes/newapp/build.sh recipes/newapp/README.md .github/workflows/newapp.yml
git config user.email "the email that you use for github"
git config user.name "your name"
git commit&lt;/code>&lt;/pre>
&lt;ol start="8">
&lt;li>Generate git personal access token (if you don’t have one already)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Browse to https://github.com/NeuroDesk/neurocontainers/
Press on your picture in upper right corner --&amp;gt; Setting --&amp;gt; Developer Settings --&amp;gt; Personal Access Token
Press on “generate personal access token”
Write something in “Notes” (doesn’t matter what, it’s for your own use)
Check “repo”
Check “Workflow”
Press “Generate Token” at the bottom
Copy the token displayed on the screen into a file, so you’ll have it later
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="9">
&lt;li>Test the container locally, and if successful push repo to trigger the automatic build on GitHub&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>git pull
git push&lt;/code>&lt;/pre>
&lt;ol start="10">
&lt;li>
&lt;p>Go to neurocontainers/actions. Check that the most recent workflow run in the list terminated successfully (green). Otherwise, click on it, click on “build docker”, and the line that caused the error will be highlighted&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Find your new package under &lt;a href="https://github.com/orgs/NeuroDesk/packages?repo_name=neurocontainers">https://github.com/orgs/NeuroDesk/packages?repo_name=neurocontainers&lt;/a>&lt;/p>
&lt;p>Enter the name of the package in the search box, and verify that the full package name shows up in the format &lt;em>toolName_toolVersion&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Obtain &lt;em>buildDate&lt;/em> by clicking on the full package name that came up in the search. The build date will be the newest date shown under &lt;strong>Recent tagged image versions&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;em>toolName&lt;/em>, &lt;em>toolVersion&lt;/em> and &lt;em>buildDate&lt;/em> from the previous two steps to manually download the package by typing the following in a terminal open in Neurodesktop&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>bash /neurocommand/local/fetch_and_run.sh toolName toolVersion buildDate
ml toolName/toolVersion&lt;/code>&lt;/pre>
&lt;p>For example:
If the full package name that comes up in the step 11 is itksnap_3.8.0, and the newest date under &lt;strong>Recent tagged image versions&lt;/strong> is 20210322&lt;/p>
&lt;p>The command to use in a terminal open in Neurodesktop is:&lt;/p>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>bash /neurocommand/local/fetch_and_run.sh itksnap 3.8.0 20210322
ml toolName/toolVersion&lt;/code>&lt;/pre>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Depreciation notice&lt;/h4>
&lt;p>For VNM users use:&lt;/p>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>bash /neurodesk/local/fetch_and_run.sh toolName toolVersion buildDate
ml toolName/toolVersion&lt;/code>&lt;/pre>
&lt;/div>
&lt;ol start="14">
&lt;li>
&lt;p>Test the new container. Run some commands, to see all is good&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Fork &lt;a href="https://github.com/NeuroDesk/neurocommand/">https://github.com/NeuroDesk/neurocommand/&lt;/a> to your Github account&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Edit an entry for your package in your fork of neurocommand/blob/main/neurodesk/apps.json based on one of the other entries (generating one menu item for opening a terminal inside the containers, and one menu item for the GUI, if relevant). Notice that in the json file, the version field should contain the &lt;em>buildDate&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Include an icon file in your fork of neurocommand/tree/main/neurodesk/icons&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Send a pull request from your fork of neurocommand to &lt;a href="https://github.com/NeuroDesk/neurocommand/">https://github.com/NeuroDesk/neurocommand/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When the pull request is merged by Neurodesk admins, it will trigger an action to build the singularity container, distribute it in all object storage locations and on CVMFS, and it will update the menus in the desktop image on the next daily build&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check in the dev build if everything is ok before releasing a new version of Neurodesktop:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre class="language-shell command-line" data-prompt="$">&lt;code>sudo docker pull vnmd/neurodesktop-dev:latest &amp;&amp; sudo docker run --shm-size=1gb -it --privileged --name neurodesktop -v ~/neurodesktop-storage:/neurodesktop-storage -e HOST_UID="$(id -u)" -e HOST_GID="$(id -g)" -p 8080:8080 -h neurodesktop-dev vnmd/neurodesktop-dev:latest&lt;/code>&lt;/pre>
&lt;ol start="21">
&lt;li>Consider contributing a tutorial about the new tool: &lt;a href="https://github.com/NeuroDesk/neurodesk.github.io/tree/hugo-docsy/content/en/tutorials">https://github.com/NeuroDesk/neurodesk.github.io/tree/hugo-docsy/content/en/tutorials&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Developers: Menu entries</title><link>https://kel-github/neurodesk.github.io/developers/new_tools/menu_entries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kel-github/neurodesk.github.io/developers/new_tools/menu_entries/</guid><description>
&lt;h2 id="menu-entry">Menu entry&lt;/h2>
&lt;p>As we want to propose several versions of the tools, each piece of software should have its own submenu under &lt;code>VNM Neuroimaging&lt;/code>.
To do so, you first have to add a submenu to &lt;code>menus/vnm-applications.menu&lt;/code> by adding:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#8f5902;font-style:italic">&amp;lt;!-- [[Tool Name]] submenu --&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;Menu&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;Name&amp;gt;&lt;/span>[[Tool Name]]&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/Name&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;Directory&amp;gt;&lt;/span>vnm-[[tool-name]].directory&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/Directory&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;Include&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;And&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;Category&amp;gt;&lt;/span>[[Tool-Name]]&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/Category&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/And&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/Include&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/Menu&amp;gt;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;!-- End [[Tool Name]] --&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following table shows the formatting rules to follow:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Placeholder&lt;/th>
&lt;th>Rule&lt;/th>
&lt;th>Example&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>[[Tool name]]&lt;/code>&lt;/td>
&lt;td>Capitalized, spaces&lt;/td>
&lt;td>&lt;code>ITK snap&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[tool-name]]&lt;/code>&lt;/td>
&lt;td>Lower case, no spaces (use &lt;code>-&lt;/code> instead)&lt;/td>
&lt;td>&lt;code>itk-snap&lt;/code> or &lt;code>itksnap&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[Tool-name]]&lt;/code>&lt;/td>
&lt;td>Capitalized, no spaces (use &lt;code>-&lt;/code> instead)&lt;/td>
&lt;td>&lt;code>ITK-snap&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Next, we have to create the submenu itself as we referenced it by &lt;code>vnm-[[tool-name]].directory&lt;/code>. To do so, create the file &lt;code>menus/submenus/vnm-[[tool-name]].directory&lt;/code> and add the following information inside:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#204a87;font-weight:bold">[Desktop Entry]&lt;/span>
&lt;span style="color:#c4a000">Name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">[[Tool Name]]&lt;/span>
&lt;span style="color:#c4a000">Comment&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">[[Tool Name]]&lt;/span>
&lt;span style="color:#c4a000">Icon&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">/home/neuro/.config/lxpanel/LXDE/icons/[[icon-name]].png&lt;/span>
&lt;span style="color:#c4a000">Type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">Directory&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If a specific icon is available in the &lt;code>menus/icons&lt;/code> directory, replace &lt;code>[[icon-name]]&lt;/code> by its name. Otherwise, use &lt;code>vnm&lt;/code>.&lt;/p>
&lt;h2 id="create-the-application">Create the application&lt;/h2>
&lt;p>Finally, we have to create the actual application by creating the file &lt;code>menus/applications/vnm-[[tool-name]]-[[0.0.0]].desktop&lt;/code>. The name of this file must contain the version of the tool (once again to allow multiple versions to live inside the same directory). Add the following description to this file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#204a87;font-weight:bold">[Desktop Entry]&lt;/span>
&lt;span style="color:#c4a000">Name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">[[Tool Name]] [[0.0.0]] [[(Install only)]]&lt;/span>
&lt;span style="color:#c4a000">GenericName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">[[Tool Name]] [[0.0.0]]&lt;/span>
&lt;span style="color:#c4a000">Comment&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">The description of what clicking on this application does. # This will be the tooltip of the application.&lt;/span>
&lt;span style="color:#c4a000">Exec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">The command used to run the application.&lt;/span>
&lt;span style="color:#c4a000">Icon&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">/home/neuro/.config/lxpanel/LXDE/icons/[[icon-name]].png&lt;/span>
&lt;span style="color:#c4a000">Type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">Application&lt;/span>
&lt;span style="color:#c4a000">Categories&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">[[Tool-name]]&lt;/span>
&lt;span style="color:#c4a000">Terminal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">true # or false&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The important part here is the value of &lt;code>Exec&lt;/code>. If the tool is in the form of a singularity image, you should run the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">bash /usr/share/fetch_and_run.sh &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span>tool-name&lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span>0.0.0&lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span>YYYYMMDD&lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span>cmd&lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span>args&lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What &lt;code>fetch_and_run.sh&lt;/code> does is check if the image is already installed as a module. If not, it checks whether it can be installed or not (return &lt;code>1&lt;/code> if not possible). After that, it installs the image as a module.
If &lt;code>[[cmd]]&lt;/code> is specified, once the image is installed, it runs the command by giving the arguments from &lt;code>[[args]]&lt;/code>.
Here are two examples for FreeSurfer and FreeView. This first one only installs the image as a module:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">bash /usr/share/fetch_and_run.sh freesurfer 6.0.1 &lt;span style="color:#0000cf;font-weight:bold">20200506&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And this does the same but runs FreeView afterward:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">bash /usr/share/fetch_and_run.sh freesurfer 6.0.1 &lt;span style="color:#0000cf;font-weight:bold">20200506&lt;/span> freeview
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The resulting &lt;code>.desktop&lt;/code> file corresponding to FreeView contains:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#204a87;font-weight:bold">[Desktop Entry]&lt;/span>
&lt;span style="color:#c4a000">Name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">FreeView 6.0.1&lt;/span>
&lt;span style="color:#c4a000">GenericName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">FreeView 6.0.1&lt;/span>
&lt;span style="color:#c4a000">Comment&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">Start FreeView 6.0.1&lt;/span>
&lt;span style="color:#c4a000">Exec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">bash /usr/share/fetch_and_run.sh freesurfer 6.0.1 20200506 freeview&lt;/span>
&lt;span style="color:#c4a000">Icon&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">/home/neuro/.config/lxpanel/LXDE/icons/run.png&lt;/span>
&lt;span style="color:#c4a000">Type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">Application&lt;/span>
&lt;span style="color:#c4a000">Categories&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">FreeSurfer&lt;/span>
&lt;span style="color:#c4a000">Terminal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>